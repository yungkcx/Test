
a.out:     file format elf64-x86-64


Disassembly of section .init:

0000000000400c48 <_init>:
  400c48:	48 83 ec 08          	sub    $0x8,%rsp
  400c4c:	48 8b 05 a5 23 20 00 	mov    0x2023a5(%rip),%rax        # 602ff8 <_DYNAMIC+0x1f0>
  400c53:	48 85 c0             	test   %rax,%rax
  400c56:	74 05                	je     400c5d <_init+0x15>
  400c58:	e8 43 02 00 00       	callq  400ea0 <socket@plt+0x10>
  400c5d:	48 83 c4 08          	add    $0x8,%rsp
  400c61:	c3                   	retq   

Disassembly of section .plt:

0000000000400c70 <inet_ntop@plt-0x10>:
  400c70:	ff 35 92 23 20 00    	pushq  0x202392(%rip)        # 603008 <_GLOBAL_OFFSET_TABLE_+0x8>
  400c76:	ff 25 94 23 20 00    	jmpq   *0x202394(%rip)        # 603010 <_GLOBAL_OFFSET_TABLE_+0x10>
  400c7c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400c80 <inet_ntop@plt>:
  400c80:	ff 25 92 23 20 00    	jmpq   *0x202392(%rip)        # 603018 <_GLOBAL_OFFSET_TABLE_+0x18>
  400c86:	68 00 00 00 00       	pushq  $0x0
  400c8b:	e9 e0 ff ff ff       	jmpq   400c70 <_init+0x28>

0000000000400c90 <free@plt>:
  400c90:	ff 25 8a 23 20 00    	jmpq   *0x20238a(%rip)        # 603020 <_GLOBAL_OFFSET_TABLE_+0x20>
  400c96:	68 01 00 00 00       	pushq  $0x1
  400c9b:	e9 d0 ff ff ff       	jmpq   400c70 <_init+0x28>

0000000000400ca0 <__errno_location@plt>:
  400ca0:	ff 25 82 23 20 00    	jmpq   *0x202382(%rip)        # 603028 <_GLOBAL_OFFSET_TABLE_+0x28>
  400ca6:	68 02 00 00 00       	pushq  $0x2
  400cab:	e9 c0 ff ff ff       	jmpq   400c70 <_init+0x28>

0000000000400cb0 <vsnprintf@plt>:
  400cb0:	ff 25 7a 23 20 00    	jmpq   *0x20237a(%rip)        # 603030 <_GLOBAL_OFFSET_TABLE_+0x30>
  400cb6:	68 03 00 00 00       	pushq  $0x3
  400cbb:	e9 b0 ff ff ff       	jmpq   400c70 <_init+0x28>

0000000000400cc0 <setsockopt@plt>:
  400cc0:	ff 25 72 23 20 00    	jmpq   *0x202372(%rip)        # 603038 <_GLOBAL_OFFSET_TABLE_+0x38>
  400cc6:	68 04 00 00 00       	pushq  $0x4
  400ccb:	e9 a0 ff ff ff       	jmpq   400c70 <_init+0x28>

0000000000400cd0 <fcntl@plt>:
  400cd0:	ff 25 6a 23 20 00    	jmpq   *0x20236a(%rip)        # 603040 <_GLOBAL_OFFSET_TABLE_+0x40>
  400cd6:	68 05 00 00 00       	pushq  $0x5
  400cdb:	e9 90 ff ff ff       	jmpq   400c70 <_init+0x28>

0000000000400ce0 <write@plt>:
  400ce0:	ff 25 62 23 20 00    	jmpq   *0x202362(%rip)        # 603048 <_GLOBAL_OFFSET_TABLE_+0x48>
  400ce6:	68 06 00 00 00       	pushq  $0x6
  400ceb:	e9 80 ff ff ff       	jmpq   400c70 <_init+0x28>

0000000000400cf0 <strlen@plt>:
  400cf0:	ff 25 5a 23 20 00    	jmpq   *0x20235a(%rip)        # 603050 <_GLOBAL_OFFSET_TABLE_+0x50>
  400cf6:	68 07 00 00 00       	pushq  $0x7
  400cfb:	e9 70 ff ff ff       	jmpq   400c70 <_init+0x28>

0000000000400d00 <printf@plt>:
  400d00:	ff 25 52 23 20 00    	jmpq   *0x202352(%rip)        # 603058 <_GLOBAL_OFFSET_TABLE_+0x58>
  400d06:	68 08 00 00 00       	pushq  $0x8
  400d0b:	e9 60 ff ff ff       	jmpq   400c70 <_init+0x28>

0000000000400d10 <snprintf@plt>:
  400d10:	ff 25 4a 23 20 00    	jmpq   *0x20234a(%rip)        # 603060 <_GLOBAL_OFFSET_TABLE_+0x60>
  400d16:	68 09 00 00 00       	pushq  $0x9
  400d1b:	e9 50 ff ff ff       	jmpq   400c70 <_init+0x28>

0000000000400d20 <gai_strerror@plt>:
  400d20:	ff 25 42 23 20 00    	jmpq   *0x202342(%rip)        # 603068 <_GLOBAL_OFFSET_TABLE_+0x68>
  400d26:	68 0a 00 00 00       	pushq  $0xa
  400d2b:	e9 40 ff ff ff       	jmpq   400c70 <_init+0x28>

0000000000400d30 <__assert_fail@plt>:
  400d30:	ff 25 3a 23 20 00    	jmpq   *0x20233a(%rip)        # 603070 <_GLOBAL_OFFSET_TABLE_+0x70>
  400d36:	68 0b 00 00 00       	pushq  $0xb
  400d3b:	e9 30 ff ff ff       	jmpq   400c70 <_init+0x28>

0000000000400d40 <fputs@plt>:
  400d40:	ff 25 32 23 20 00    	jmpq   *0x202332(%rip)        # 603078 <_GLOBAL_OFFSET_TABLE_+0x78>
  400d46:	68 0c 00 00 00       	pushq  $0xc
  400d4b:	e9 20 ff ff ff       	jmpq   400c70 <_init+0x28>

0000000000400d50 <memset@plt>:
  400d50:	ff 25 2a 23 20 00    	jmpq   *0x20232a(%rip)        # 603080 <_GLOBAL_OFFSET_TABLE_+0x80>
  400d56:	68 0d 00 00 00       	pushq  $0xd
  400d5b:	e9 10 ff ff ff       	jmpq   400c70 <_init+0x28>

0000000000400d60 <close@plt>:
  400d60:	ff 25 22 23 20 00    	jmpq   *0x202322(%rip)        # 603088 <_GLOBAL_OFFSET_TABLE_+0x88>
  400d66:	68 0e 00 00 00       	pushq  $0xe
  400d6b:	e9 00 ff ff ff       	jmpq   400c70 <_init+0x28>

0000000000400d70 <read@plt>:
  400d70:	ff 25 1a 23 20 00    	jmpq   *0x20231a(%rip)        # 603090 <_GLOBAL_OFFSET_TABLE_+0x90>
  400d76:	68 0f 00 00 00       	pushq  $0xf
  400d7b:	e9 f0 fe ff ff       	jmpq   400c70 <_init+0x28>

0000000000400d80 <__libc_start_main@plt>:
  400d80:	ff 25 12 23 20 00    	jmpq   *0x202312(%rip)        # 603098 <_GLOBAL_OFFSET_TABLE_+0x98>
  400d86:	68 10 00 00 00       	pushq  $0x10
  400d8b:	e9 e0 fe ff ff       	jmpq   400c70 <_init+0x28>

0000000000400d90 <memcpy@plt>:
  400d90:	ff 25 0a 23 20 00    	jmpq   *0x20230a(%rip)        # 6030a0 <_GLOBAL_OFFSET_TABLE_+0xa0>
  400d96:	68 11 00 00 00       	pushq  $0x11
  400d9b:	e9 d0 fe ff ff       	jmpq   400c70 <_init+0x28>

0000000000400da0 <malloc@plt>:
  400da0:	ff 25 02 23 20 00    	jmpq   *0x202302(%rip)        # 6030a8 <_GLOBAL_OFFSET_TABLE_+0xa8>
  400da6:	68 12 00 00 00       	pushq  $0x12
  400dab:	e9 c0 fe ff ff       	jmpq   400c70 <_init+0x28>

0000000000400db0 <fflush@plt>:
  400db0:	ff 25 fa 22 20 00    	jmpq   *0x2022fa(%rip)        # 6030b0 <_GLOBAL_OFFSET_TABLE_+0xb0>
  400db6:	68 13 00 00 00       	pushq  $0x13
  400dbb:	e9 b0 fe ff ff       	jmpq   400c70 <_init+0x28>

0000000000400dc0 <listen@plt>:
  400dc0:	ff 25 f2 22 20 00    	jmpq   *0x2022f2(%rip)        # 6030b8 <_GLOBAL_OFFSET_TABLE_+0xb8>
  400dc6:	68 14 00 00 00       	pushq  $0x14
  400dcb:	e9 a0 fe ff ff       	jmpq   400c70 <_init+0x28>

0000000000400dd0 <ntohs@plt>:
  400dd0:	ff 25 ea 22 20 00    	jmpq   *0x2022ea(%rip)        # 6030c0 <_GLOBAL_OFFSET_TABLE_+0xc0>
  400dd6:	68 15 00 00 00       	pushq  $0x15
  400ddb:	e9 90 fe ff ff       	jmpq   400c70 <_init+0x28>

0000000000400de0 <bind@plt>:
  400de0:	ff 25 e2 22 20 00    	jmpq   *0x2022e2(%rip)        # 6030c8 <_GLOBAL_OFFSET_TABLE_+0xc8>
  400de6:	68 16 00 00 00       	pushq  $0x16
  400deb:	e9 80 fe ff ff       	jmpq   400c70 <_init+0x28>

0000000000400df0 <error@plt>:
  400df0:	ff 25 da 22 20 00    	jmpq   *0x2022da(%rip)        # 6030d0 <_GLOBAL_OFFSET_TABLE_+0xd0>
  400df6:	68 17 00 00 00       	pushq  $0x17
  400dfb:	e9 70 fe ff ff       	jmpq   400c70 <_init+0x28>

0000000000400e00 <pthread_self@plt>:
  400e00:	ff 25 d2 22 20 00    	jmpq   *0x2022d2(%rip)        # 6030d8 <_GLOBAL_OFFSET_TABLE_+0xd8>
  400e06:	68 18 00 00 00       	pushq  $0x18
  400e0b:	e9 60 fe ff ff       	jmpq   400c70 <_init+0x28>

0000000000400e10 <accept@plt>:
  400e10:	ff 25 ca 22 20 00    	jmpq   *0x2022ca(%rip)        # 6030e0 <_GLOBAL_OFFSET_TABLE_+0xe0>
  400e16:	68 19 00 00 00       	pushq  $0x19
  400e1b:	e9 50 fe ff ff       	jmpq   400c70 <_init+0x28>

0000000000400e20 <strcat@plt>:
  400e20:	ff 25 c2 22 20 00    	jmpq   *0x2022c2(%rip)        # 6030e8 <_GLOBAL_OFFSET_TABLE_+0xe8>
  400e26:	68 1a 00 00 00       	pushq  $0x1a
  400e2b:	e9 40 fe ff ff       	jmpq   400c70 <_init+0x28>

0000000000400e30 <exit@plt>:
  400e30:	ff 25 ba 22 20 00    	jmpq   *0x2022ba(%rip)        # 6030f0 <_GLOBAL_OFFSET_TABLE_+0xf0>
  400e36:	68 1b 00 00 00       	pushq  $0x1b
  400e3b:	e9 30 fe ff ff       	jmpq   400c70 <_init+0x28>

0000000000400e40 <connect@plt>:
  400e40:	ff 25 b2 22 20 00    	jmpq   *0x2022b2(%rip)        # 6030f8 <_GLOBAL_OFFSET_TABLE_+0xf8>
  400e46:	68 1c 00 00 00       	pushq  $0x1c
  400e4b:	e9 20 fe ff ff       	jmpq   400c70 <_init+0x28>

0000000000400e50 <getaddrinfo@plt>:
  400e50:	ff 25 aa 22 20 00    	jmpq   *0x2022aa(%rip)        # 603100 <_GLOBAL_OFFSET_TABLE_+0x100>
  400e56:	68 1d 00 00 00       	pushq  $0x1d
  400e5b:	e9 10 fe ff ff       	jmpq   400c70 <_init+0x28>

0000000000400e60 <strerror@plt>:
  400e60:	ff 25 a2 22 20 00    	jmpq   *0x2022a2(%rip)        # 603108 <_GLOBAL_OFFSET_TABLE_+0x108>
  400e66:	68 1e 00 00 00       	pushq  $0x1e
  400e6b:	e9 00 fe ff ff       	jmpq   400c70 <_init+0x28>

0000000000400e70 <__ctype_b_loc@plt>:
  400e70:	ff 25 9a 22 20 00    	jmpq   *0x20229a(%rip)        # 603110 <_GLOBAL_OFFSET_TABLE_+0x110>
  400e76:	68 1f 00 00 00       	pushq  $0x1f
  400e7b:	e9 f0 fd ff ff       	jmpq   400c70 <_init+0x28>

0000000000400e80 <freeaddrinfo@plt>:
  400e80:	ff 25 92 22 20 00    	jmpq   *0x202292(%rip)        # 603118 <_GLOBAL_OFFSET_TABLE_+0x118>
  400e86:	68 20 00 00 00       	pushq  $0x20
  400e8b:	e9 e0 fd ff ff       	jmpq   400c70 <_init+0x28>

0000000000400e90 <socket@plt>:
  400e90:	ff 25 8a 22 20 00    	jmpq   *0x20228a(%rip)        # 603120 <_GLOBAL_OFFSET_TABLE_+0x120>
  400e96:	68 21 00 00 00       	pushq  $0x21
  400e9b:	e9 d0 fd ff ff       	jmpq   400c70 <_init+0x28>

Disassembly of section .plt.got:

0000000000400ea0 <.plt.got>:
  400ea0:	ff 25 52 21 20 00    	jmpq   *0x202152(%rip)        # 602ff8 <_DYNAMIC+0x1f0>
  400ea6:	66 90                	xchg   %ax,%ax

Disassembly of section .text:

0000000000400eb0 <_start>:
  400eb0:	31 ed                	xor    %ebp,%ebp
  400eb2:	49 89 d1             	mov    %rdx,%r9
  400eb5:	5e                   	pop    %rsi
  400eb6:	48 89 e2             	mov    %rsp,%rdx
  400eb9:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  400ebd:	50                   	push   %rax
  400ebe:	54                   	push   %rsp
  400ebf:	49 c7 c0 f0 26 40 00 	mov    $0x4026f0,%r8
  400ec6:	48 c7 c1 80 26 40 00 	mov    $0x402680,%rcx
  400ecd:	48 c7 c7 30 10 40 00 	mov    $0x401030,%rdi
  400ed4:	e8 a7 fe ff ff       	callq  400d80 <__libc_start_main@plt>
  400ed9:	f4                   	hlt    
  400eda:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000400ee0 <deregister_tm_clones>:
  400ee0:	b8 3f 31 60 00       	mov    $0x60313f,%eax
  400ee5:	55                   	push   %rbp
  400ee6:	48 2d 38 31 60 00    	sub    $0x603138,%rax
  400eec:	48 83 f8 0e          	cmp    $0xe,%rax
  400ef0:	48 89 e5             	mov    %rsp,%rbp
  400ef3:	76 1b                	jbe    400f10 <deregister_tm_clones+0x30>
  400ef5:	b8 00 00 00 00       	mov    $0x0,%eax
  400efa:	48 85 c0             	test   %rax,%rax
  400efd:	74 11                	je     400f10 <deregister_tm_clones+0x30>
  400eff:	5d                   	pop    %rbp
  400f00:	bf 38 31 60 00       	mov    $0x603138,%edi
  400f05:	ff e0                	jmpq   *%rax
  400f07:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  400f0e:	00 00 
  400f10:	5d                   	pop    %rbp
  400f11:	c3                   	retq   
  400f12:	0f 1f 40 00          	nopl   0x0(%rax)
  400f16:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  400f1d:	00 00 00 

0000000000400f20 <register_tm_clones>:
  400f20:	be 38 31 60 00       	mov    $0x603138,%esi
  400f25:	55                   	push   %rbp
  400f26:	48 81 ee 38 31 60 00 	sub    $0x603138,%rsi
  400f2d:	48 c1 fe 03          	sar    $0x3,%rsi
  400f31:	48 89 e5             	mov    %rsp,%rbp
  400f34:	48 89 f0             	mov    %rsi,%rax
  400f37:	48 c1 e8 3f          	shr    $0x3f,%rax
  400f3b:	48 01 c6             	add    %rax,%rsi
  400f3e:	48 d1 fe             	sar    %rsi
  400f41:	74 15                	je     400f58 <register_tm_clones+0x38>
  400f43:	b8 00 00 00 00       	mov    $0x0,%eax
  400f48:	48 85 c0             	test   %rax,%rax
  400f4b:	74 0b                	je     400f58 <register_tm_clones+0x38>
  400f4d:	5d                   	pop    %rbp
  400f4e:	bf 38 31 60 00       	mov    $0x603138,%edi
  400f53:	ff e0                	jmpq   *%rax
  400f55:	0f 1f 00             	nopl   (%rax)
  400f58:	5d                   	pop    %rbp
  400f59:	c3                   	retq   
  400f5a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000400f60 <__do_global_dtors_aux>:
  400f60:	80 3d e1 21 20 00 00 	cmpb   $0x0,0x2021e1(%rip)        # 603148 <completed.7585>
  400f67:	75 11                	jne    400f7a <__do_global_dtors_aux+0x1a>
  400f69:	55                   	push   %rbp
  400f6a:	48 89 e5             	mov    %rsp,%rbp
  400f6d:	e8 6e ff ff ff       	callq  400ee0 <deregister_tm_clones>
  400f72:	5d                   	pop    %rbp
  400f73:	c6 05 ce 21 20 00 01 	movb   $0x1,0x2021ce(%rip)        # 603148 <completed.7585>
  400f7a:	f3 c3                	repz retq 
  400f7c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400f80 <frame_dummy>:
  400f80:	bf 00 2e 60 00       	mov    $0x602e00,%edi
  400f85:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  400f89:	75 05                	jne    400f90 <frame_dummy+0x10>
  400f8b:	eb 93                	jmp    400f20 <register_tm_clones>
  400f8d:	0f 1f 00             	nopl   (%rax)
  400f90:	b8 00 00 00 00       	mov    $0x0,%eax
  400f95:	48 85 c0             	test   %rax,%rax
  400f98:	74 f1                	je     400f8b <frame_dummy+0xb>
  400f9a:	55                   	push   %rbp
  400f9b:	48 89 e5             	mov    %rsp,%rbp
  400f9e:	ff d0                	callq  *%rax
  400fa0:	5d                   	pop    %rbp
  400fa1:	e9 7a ff ff ff       	jmpq   400f20 <register_tm_clones>
  400fa6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  400fad:	00 00 00 

0000000000400fb0 <print_int>:
#include "all.h"

void print_int(int x)
{
  400fb0:	55                   	push   %rbp
  400fb1:	48 89 e5             	mov    %rsp,%rbp
  400fb4:	48 83 ec 10          	sub    $0x10,%rsp
  400fb8:	48 b8 04 27 40 00 00 	movabs $0x402704,%rax
  400fbf:	00 00 00 
  400fc2:	89 7d fc             	mov    %edi,-0x4(%rbp)
    printf("%d\n", x);
  400fc5:	8b 75 fc             	mov    -0x4(%rbp),%esi
  400fc8:	48 89 c7             	mov    %rax,%rdi
  400fcb:	b0 00                	mov    $0x0,%al
  400fcd:	e8 2e fd ff ff       	callq  400d00 <printf@plt>
}
  400fd2:	89 45 f8             	mov    %eax,-0x8(%rbp)
  400fd5:	48 83 c4 10          	add    $0x10,%rsp
  400fd9:	5d                   	pop    %rbp
  400fda:	c3                   	retq   
  400fdb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000400fe0 <print_double>:

void print_double(double f)
{
  400fe0:	55                   	push   %rbp
  400fe1:	48 89 e5             	mov    %rsp,%rbp
  400fe4:	48 83 ec 10          	sub    $0x10,%rsp
  400fe8:	48 bf 08 27 40 00 00 	movabs $0x402708,%rdi
  400fef:	00 00 00 
  400ff2:	f2 0f 11 45 f8       	movsd  %xmm0,-0x8(%rbp)
    printf("%lf\n", f);
  400ff7:	f2 0f 10 45 f8       	movsd  -0x8(%rbp),%xmm0
  400ffc:	b0 01                	mov    $0x1,%al
  400ffe:	e8 fd fc ff ff       	callq  400d00 <printf@plt>
}
  401003:	89 45 f4             	mov    %eax,-0xc(%rbp)
  401006:	48 83 c4 10          	add    $0x10,%rsp
  40100a:	5d                   	pop    %rbp
  40100b:	c3                   	retq   
  40100c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401010 <func>:
struct ss {
    int a;
};

struct ss func()
{
  401010:	55                   	push   %rbp
  401011:	48 89 e5             	mov    %rsp,%rbp
    int a;
    struct ss s;
    s.a = 10;
  401014:	c7 45 f0 0a 00 00 00 	movl   $0xa,-0x10(%rbp)
    return s;
  40101b:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40101e:	89 45 f8             	mov    %eax,-0x8(%rbp)
  401021:	8b 45 f8             	mov    -0x8(%rbp),%eax
  401024:	5d                   	pop    %rbp
  401025:	c3                   	retq   
  401026:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40102d:	00 00 00 

0000000000401030 <main>:
}

int main()
{
  401030:	55                   	push   %rbp
  401031:	48 89 e5             	mov    %rsp,%rbp
  401034:	48 83 ec 20          	sub    $0x20,%rsp
  401038:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    struct ss s;
    s = func();
  40103f:	e8 cc ff ff ff       	callq  401010 <func>
  401044:	48 bf 04 27 40 00 00 	movabs $0x402704,%rdi
  40104b:	00 00 00 
  40104e:	89 45 f0             	mov    %eax,-0x10(%rbp)
  401051:	8b 45 f0             	mov    -0x10(%rbp),%eax
  401054:	89 45 f8             	mov    %eax,-0x8(%rbp)
    printf("%d\n", s.a);
  401057:	8b 75 f8             	mov    -0x8(%rbp),%esi
  40105a:	b0 00                	mov    $0x0,%al
  40105c:	e8 9f fc ff ff       	callq  400d00 <printf@plt>
  401061:	31 f6                	xor    %esi,%esi
    return 0;
  401063:	89 45 ec             	mov    %eax,-0x14(%rbp)
  401066:	89 f0                	mov    %esi,%eax
  401068:	48 83 c4 20          	add    $0x20,%rsp
  40106c:	5d                   	pop    %rbp
  40106d:	c3                   	retq   
  40106e:	66 90                	xchg   %ax,%ax

0000000000401070 <build_arp>:
#include "all.h"

int build_arp(uint16_t hrd, uint16_t pro, uint8_t hln, uint8_t pln, uint16_t op, const uint8_t *sha, const uint8_t *spa, const uint8_t *tha, const uint8_t *tpa, const uint8_t *payload, uint32_t payload_s)
{
  401070:	55                   	push   %rbp
  401071:	48 89 e5             	mov    %rsp,%rbp
  401074:	41 57                	push   %r15
  401076:	41 56                	push   %r14
  401078:	41 55                	push   %r13
  40107a:	41 54                	push   %r12
  40107c:	53                   	push   %rbx
  40107d:	66 44 89 c0          	mov    %r8w,%ax
  401081:	41 88 ca             	mov    %cl,%r10b
  401084:	41 88 d3             	mov    %dl,%r11b
  401087:	66 89 f3             	mov    %si,%bx
  40108a:	66 41 89 fe          	mov    %di,%r14w
  40108e:	8b 4d 30             	mov    0x30(%rbp),%ecx
  401091:	4c 8b 7d 28          	mov    0x28(%rbp),%r15
  401095:	4c 8b 65 20          	mov    0x20(%rbp),%r12
  401099:	4c 8b 6d 18          	mov    0x18(%rbp),%r13
  40109d:	48 8b 75 10          	mov    0x10(%rbp),%rsi
  4010a1:	ba 01 00 00 00       	mov    $0x1,%edx
  4010a6:	66 44 89 75 d6       	mov    %r14w,-0x2a(%rbp)
  4010ab:	66 89 5d d4          	mov    %bx,-0x2c(%rbp)
  4010af:	44 88 5d d3          	mov    %r11b,-0x2d(%rbp)
  4010b3:	44 88 55 d2          	mov    %r10b,-0x2e(%rbp)
  4010b7:	66 89 45 d0          	mov    %ax,-0x30(%rbp)
  4010bb:	4c 89 4d c8          	mov    %r9,-0x38(%rbp)
  4010bf:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  4010c3:	4c 89 6d b8          	mov    %r13,-0x48(%rbp)
  4010c7:	4c 89 65 b0          	mov    %r12,-0x50(%rbp)
  4010cb:	4c 89 7d a8          	mov    %r15,-0x58(%rbp)
  4010cf:	89 4d a4             	mov    %ecx,-0x5c(%rbp)
    return 1;
  4010d2:	89 d0                	mov    %edx,%eax
  4010d4:	5b                   	pop    %rbx
  4010d5:	41 5c                	pop    %r12
  4010d7:	41 5d                	pop    %r13
  4010d9:	41 5e                	pop    %r14
  4010db:	41 5f                	pop    %r15
  4010dd:	5d                   	pop    %rbp
  4010de:	c3                   	retq   
  4010df:	90                   	nop

00000000004010e0 <set_fl>:
#include "all.h"

int set_fl(int fd, int flags)
{
  4010e0:	55                   	push   %rbp
  4010e1:	48 89 e5             	mov    %rsp,%rbp
  4010e4:	48 83 ec 10          	sub    $0x10,%rsp
  4010e8:	b8 03 00 00 00       	mov    $0x3,%eax
  4010ed:	31 d2                	xor    %edx,%edx
  4010ef:	89 7d f8             	mov    %edi,-0x8(%rbp)
  4010f2:	89 75 f4             	mov    %esi,-0xc(%rbp)
    /* Cant't be used to set O_SYNC or O_DSYNC. */
    int val;
    if ((val = fcntl(fd, F_GETFL, 0)) < 0)
  4010f5:	8b 7d f8             	mov    -0x8(%rbp),%edi
  4010f8:	89 c6                	mov    %eax,%esi
  4010fa:	b0 00                	mov    $0x0,%al
  4010fc:	e8 cf fb ff ff       	callq  400cd0 <fcntl@plt>
  401101:	89 45 f0             	mov    %eax,-0x10(%rbp)
  401104:	83 f8 00             	cmp    $0x0,%eax
  401107:	0f 8d 0b 00 00 00    	jge    401118 <set_fl+0x38>
        return val;
  40110d:	8b 45 f0             	mov    -0x10(%rbp),%eax
  401110:	89 45 fc             	mov    %eax,-0x4(%rbp)
  401113:	e9 1e 00 00 00       	jmpq   401136 <set_fl+0x56>
  401118:	be 04 00 00 00       	mov    $0x4,%esi
    val |= flags;
  40111d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  401120:	0b 45 f0             	or     -0x10(%rbp),%eax
  401123:	89 45 f0             	mov    %eax,-0x10(%rbp)
    return fcntl(fd, F_SETFL, val);
  401126:	8b 7d f8             	mov    -0x8(%rbp),%edi
  401129:	8b 55 f0             	mov    -0x10(%rbp),%edx
  40112c:	b0 00                	mov    $0x0,%al
  40112e:	e8 9d fb ff ff       	callq  400cd0 <fcntl@plt>
  401133:	89 45 fc             	mov    %eax,-0x4(%rbp)
}
  401136:	8b 45 fc             	mov    -0x4(%rbp),%eax
  401139:	48 83 c4 10          	add    $0x10,%rsp
  40113d:	5d                   	pop    %rbp
  40113e:	c3                   	retq   
  40113f:	90                   	nop

0000000000401140 <clr_fl>:

int clr_fl(int fd, int flags)
{
  401140:	55                   	push   %rbp
  401141:	48 89 e5             	mov    %rsp,%rbp
  401144:	48 83 ec 10          	sub    $0x10,%rsp
  401148:	b8 03 00 00 00       	mov    $0x3,%eax
  40114d:	31 d2                	xor    %edx,%edx
  40114f:	89 7d f8             	mov    %edi,-0x8(%rbp)
  401152:	89 75 f4             	mov    %esi,-0xc(%rbp)
    int val;
    if ((val = fcntl(fd, F_GETFL, 0)) < 0)
  401155:	8b 7d f8             	mov    -0x8(%rbp),%edi
  401158:	89 c6                	mov    %eax,%esi
  40115a:	b0 00                	mov    $0x0,%al
  40115c:	e8 6f fb ff ff       	callq  400cd0 <fcntl@plt>
  401161:	89 45 f0             	mov    %eax,-0x10(%rbp)
  401164:	83 f8 00             	cmp    $0x0,%eax
  401167:	0f 8d 0b 00 00 00    	jge    401178 <clr_fl+0x38>
        return val;
  40116d:	8b 45 f0             	mov    -0x10(%rbp),%eax
  401170:	89 45 fc             	mov    %eax,-0x4(%rbp)
  401173:	e9 21 00 00 00       	jmpq   401199 <clr_fl+0x59>
  401178:	be 04 00 00 00       	mov    $0x4,%esi
    val &= ~flags;
  40117d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  401180:	83 f0 ff             	xor    $0xffffffff,%eax
  401183:	23 45 f0             	and    -0x10(%rbp),%eax
  401186:	89 45 f0             	mov    %eax,-0x10(%rbp)
    return fcntl(fd, F_SETFL, val);
  401189:	8b 7d f8             	mov    -0x8(%rbp),%edi
  40118c:	8b 55 f0             	mov    -0x10(%rbp),%edx
  40118f:	b0 00                	mov    $0x0,%al
  401191:	e8 3a fb ff ff       	callq  400cd0 <fcntl@plt>
  401196:	89 45 fc             	mov    %eax,-0x4(%rbp)
}
  401199:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40119c:	48 83 c4 10          	add    $0x10,%rsp
  4011a0:	5d                   	pop    %rbp
  4011a1:	c3                   	retq   
  4011a2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  4011a9:	1f 84 00 00 00 00 00 

00000000004011b0 <parse_hex4>:

unsigned parse_hex4(const char *p)
{
  4011b0:	55                   	push   %rbp
  4011b1:	48 89 e5             	mov    %rsp,%rbp
  4011b4:	48 83 ec 20          	sub    $0x20,%rsp
  4011b8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    int i;
    unsigned u;

    u = 0;
  4011bc:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
    for (i = 0; i < 4; ++i) {
  4011c3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  4011ca:	83 7d ec 04          	cmpl   $0x4,-0x14(%rbp)
  4011ce:	0f 8d c0 00 00 00    	jge    401294 <parse_hex4+0xe4>
        u <<= 4;
  4011d4:	8b 45 e8             	mov    -0x18(%rbp),%eax
  4011d7:	c1 e0 04             	shl    $0x4,%eax
  4011da:	89 45 e8             	mov    %eax,-0x18(%rbp)
        if (isdigit(p[i]))
  4011dd:	48 63 4d ec          	movslq -0x14(%rbp),%rcx
  4011e1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4011e5:	0f be 04 0a          	movsbl (%rdx,%rcx,1),%eax
  4011e9:	48 63 c8             	movslq %eax,%rcx
  4011ec:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  4011f0:	e8 7b fc ff ff       	callq  400e70 <__ctype_b_loc@plt>
  4011f5:	48 8b 00             	mov    (%rax),%rax
  4011f8:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4011fc:	0f b7 34 48          	movzwl (%rax,%rcx,2),%esi
  401200:	81 e6 00 08 00 00    	and    $0x800,%esi
  401206:	83 fe 00             	cmp    $0x0,%esi
  401209:	0f 84 1a 00 00 00    	je     401229 <parse_hex4+0x79>
            u += p[i] - '0';
  40120f:	48 63 45 ec          	movslq -0x14(%rbp),%rax
  401213:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  401217:	0f be 14 01          	movsbl (%rcx,%rax,1),%edx
  40121b:	83 ea 30             	sub    $0x30,%edx
  40121e:	03 55 e8             	add    -0x18(%rbp),%edx
  401221:	89 55 e8             	mov    %edx,-0x18(%rbp)
  401224:	e9 58 00 00 00       	jmpq   401281 <parse_hex4+0xd1>
        else if (p[i] <= 'f' && p[i] >= 'a')
  401229:	48 63 45 ec          	movslq -0x14(%rbp),%rax
  40122d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  401231:	0f be 14 01          	movsbl (%rcx,%rax,1),%edx
  401235:	83 fa 66             	cmp    $0x66,%edx
  401238:	0f 8f 32 00 00 00    	jg     401270 <parse_hex4+0xc0>
  40123e:	48 63 45 ec          	movslq -0x14(%rbp),%rax
  401242:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  401246:	0f be 14 01          	movsbl (%rcx,%rax,1),%edx
  40124a:	83 fa 61             	cmp    $0x61,%edx
  40124d:	0f 8c 1d 00 00 00    	jl     401270 <parse_hex4+0xc0>
            u += p[i] - 'a' + 10;
  401253:	48 63 45 ec          	movslq -0x14(%rbp),%rax
  401257:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40125b:	0f be 14 01          	movsbl (%rcx,%rax,1),%edx
  40125f:	83 ea 61             	sub    $0x61,%edx
  401262:	83 c2 0a             	add    $0xa,%edx
  401265:	03 55 e8             	add    -0x18(%rbp),%edx
  401268:	89 55 e8             	mov    %edx,-0x18(%rbp)
  40126b:	e9 0c 00 00 00       	jmpq   40127c <parse_hex4+0xcc>
        else
            return 0;
  401270:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  401277:	e9 1e 00 00 00       	jmpq   40129a <parse_hex4+0xea>
  40127c:	e9 00 00 00 00       	jmpq   401281 <parse_hex4+0xd1>
    }
  401281:	e9 00 00 00 00       	jmpq   401286 <parse_hex4+0xd6>
{
    int i;
    unsigned u;

    u = 0;
    for (i = 0; i < 4; ++i) {
  401286:	8b 45 ec             	mov    -0x14(%rbp),%eax
  401289:	83 c0 01             	add    $0x1,%eax
  40128c:	89 45 ec             	mov    %eax,-0x14(%rbp)
  40128f:	e9 36 ff ff ff       	jmpq   4011ca <parse_hex4+0x1a>
        else if (p[i] <= 'f' && p[i] >= 'a')
            u += p[i] - 'a' + 10;
        else
            return 0;
    }
    return u;
  401294:	8b 45 e8             	mov    -0x18(%rbp),%eax
  401297:	89 45 fc             	mov    %eax,-0x4(%rbp)
}
  40129a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40129d:	48 83 c4 20          	add    $0x20,%rsp
  4012a1:	5d                   	pop    %rbp
  4012a2:	c3                   	retq   
  4012a3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  4012aa:	84 00 00 00 00 00 

00000000004012b0 <encode_utf8>:

void encode_utf8(char *c, unsigned u)
{
  4012b0:	55                   	push   %rbp
  4012b1:	48 89 e5             	mov    %rsp,%rbp
  4012b4:	48 83 ec 10          	sub    $0x10,%rsp
  4012b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4012bc:	89 75 f4             	mov    %esi,-0xc(%rbp)
    assert(u >= 0x0000 && u <= 0x10ffff);
  4012bf:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  4012c3:	0f 82 12 00 00 00    	jb     4012db <encode_utf8+0x2b>
  4012c9:	81 7d f4 ff ff 10 00 	cmpl   $0x10ffff,-0xc(%rbp)
  4012d0:	0f 87 05 00 00 00    	ja     4012db <encode_utf8+0x2b>
  4012d6:	e9 28 00 00 00       	jmpq   401303 <encode_utf8+0x53>
  4012db:	48 bf 0d 27 40 00 00 	movabs $0x40270d,%rdi
  4012e2:	00 00 00 
  4012e5:	48 be 2a 27 40 00 00 	movabs $0x40272a,%rsi
  4012ec:	00 00 00 
  4012ef:	ba 2a 00 00 00       	mov    $0x2a,%edx
  4012f4:	48 b9 34 27 40 00 00 	movabs $0x402734,%rcx
  4012fb:	00 00 00 
  4012fe:	e8 2d fa ff ff       	callq  400d30 <__assert_fail@plt>
    if (u <= 0x007f)
  401303:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%rbp)
  401307:	0f 87 10 00 00 00    	ja     40131d <encode_utf8+0x6d>
        c[0] = (char) u;
  40130d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  401310:	88 c1                	mov    %al,%cl
  401312:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  401316:	88 0a                	mov    %cl,(%rdx)
  401318:	e9 f7 00 00 00       	jmpq   401414 <encode_utf8+0x164>
    else if (u <= 0x07ff) {
  40131d:	81 7d f4 ff 07 00 00 	cmpl   $0x7ff,-0xc(%rbp)
  401324:	0f 87 31 00 00 00    	ja     40135b <encode_utf8+0xab>
        c[0] = (0xc0 | ((u >>  6) & 0xff));
  40132a:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40132d:	c1 e8 06             	shr    $0x6,%eax
  401330:	25 ff 00 00 00       	and    $0xff,%eax
  401335:	0d c0 00 00 00       	or     $0xc0,%eax
  40133a:	88 c1                	mov    %al,%cl
  40133c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  401340:	88 0a                	mov    %cl,(%rdx)
        c[1] = (0x80 | ( u        & 0x3f));
  401342:	8b 45 f4             	mov    -0xc(%rbp),%eax
  401345:	83 e0 3f             	and    $0x3f,%eax
  401348:	0d 80 00 00 00       	or     $0x80,%eax
  40134d:	88 c1                	mov    %al,%cl
  40134f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  401353:	88 4a 01             	mov    %cl,0x1(%rdx)
    } else if (u <= 0xffff) {
  401356:	e9 b4 00 00 00       	jmpq   40140f <encode_utf8+0x15f>
  40135b:	81 7d f4 ff ff 00 00 	cmpl   $0xffff,-0xc(%rbp)
  401362:	0f 87 48 00 00 00    	ja     4013b0 <encode_utf8+0x100>
        c[0] = (0xe0 | ((u >> 12) & 0xff));
  401368:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40136b:	c1 e8 0c             	shr    $0xc,%eax
  40136e:	25 ff 00 00 00       	and    $0xff,%eax
  401373:	0d e0 00 00 00       	or     $0xe0,%eax
  401378:	88 c1                	mov    %al,%cl
  40137a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40137e:	88 0a                	mov    %cl,(%rdx)
        c[1] = (0x80 | ((u >>  6) & 0x3f));
  401380:	8b 45 f4             	mov    -0xc(%rbp),%eax
  401383:	c1 e8 06             	shr    $0x6,%eax
  401386:	83 e0 3f             	and    $0x3f,%eax
  401389:	0d 80 00 00 00       	or     $0x80,%eax
  40138e:	88 c1                	mov    %al,%cl
  401390:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  401394:	88 4a 01             	mov    %cl,0x1(%rdx)
        c[2] = (0x80 | ( u        & 0x3f));
  401397:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40139a:	83 e0 3f             	and    $0x3f,%eax
  40139d:	0d 80 00 00 00       	or     $0x80,%eax
  4013a2:	88 c1                	mov    %al,%cl
  4013a4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4013a8:	88 4a 02             	mov    %cl,0x2(%rdx)
    } else { /* 0x10000 ~ 0x10ffff */
  4013ab:	e9 5a 00 00 00       	jmpq   40140a <encode_utf8+0x15a>
        c[0] = (0xf0 | ((u >> 18) & 0xff));
  4013b0:	8b 45 f4             	mov    -0xc(%rbp),%eax
  4013b3:	c1 e8 12             	shr    $0x12,%eax
  4013b6:	25 ff 00 00 00       	and    $0xff,%eax
  4013bb:	0d f0 00 00 00       	or     $0xf0,%eax
  4013c0:	88 c1                	mov    %al,%cl
  4013c2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4013c6:	88 0a                	mov    %cl,(%rdx)
        c[1] = (0x80 | ((u >> 12) & 0x3f));
  4013c8:	8b 45 f4             	mov    -0xc(%rbp),%eax
  4013cb:	c1 e8 0c             	shr    $0xc,%eax
  4013ce:	83 e0 3f             	and    $0x3f,%eax
  4013d1:	0d 80 00 00 00       	or     $0x80,%eax
  4013d6:	88 c1                	mov    %al,%cl
  4013d8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4013dc:	88 4a 01             	mov    %cl,0x1(%rdx)
        c[2] = (0x80 | ((u >>  6) & 0x3f));
  4013df:	8b 45 f4             	mov    -0xc(%rbp),%eax
  4013e2:	c1 e8 06             	shr    $0x6,%eax
  4013e5:	83 e0 3f             	and    $0x3f,%eax
  4013e8:	0d 80 00 00 00       	or     $0x80,%eax
  4013ed:	88 c1                	mov    %al,%cl
  4013ef:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4013f3:	88 4a 02             	mov    %cl,0x2(%rdx)
        c[3] = (0x80 | ( u        & 0x3f));
  4013f6:	8b 45 f4             	mov    -0xc(%rbp),%eax
  4013f9:	83 e0 3f             	and    $0x3f,%eax
  4013fc:	0d 80 00 00 00       	or     $0x80,%eax
  401401:	88 c1                	mov    %al,%cl
  401403:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  401407:	88 4a 03             	mov    %cl,0x3(%rdx)
  40140a:	e9 00 00 00 00       	jmpq   40140f <encode_utf8+0x15f>
  40140f:	e9 00 00 00 00       	jmpq   401414 <encode_utf8+0x164>
    }
}
  401414:	48 83 c4 10          	add    $0x10,%rsp
  401418:	5d                   	pop    %rbp
  401419:	c3                   	retq   
  40141a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000401420 <host_serv>:

/* return a addrinfo pointer and connect by yourself */
struct addrinfo *host_serv(const char *host, const char *port,
		int family, int socktype)
{
  401420:	55                   	push   %rbp
  401421:	48 89 e5             	mov    %rsp,%rbp
  401424:	48 83 ec 70          	sub    $0x70,%rsp
  401428:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
  40142c:	4c 8d 45 a0          	lea    -0x60(%rbp),%r8
  401430:	45 31 c9             	xor    %r9d,%r9d
  401433:	41 ba 30 00 00 00    	mov    $0x30,%r10d
  401439:	45 89 d3             	mov    %r10d,%r11d
  40143c:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  401440:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
  401444:	89 55 e4             	mov    %edx,-0x1c(%rbp)
  401447:	89 4d e0             	mov    %ecx,-0x20(%rbp)
	int n;
	struct addrinfo hints, *res;

	memset(&hints, 0, sizeof(struct addrinfo));
  40144a:	48 89 c6             	mov    %rax,%rsi
  40144d:	48 89 f7             	mov    %rsi,%rdi
  401450:	44 89 ce             	mov    %r9d,%esi
  401453:	4c 89 da             	mov    %r11,%rdx
  401456:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
  40145a:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  40145e:	e8 ed f8 ff ff       	callq  400d50 <memset@plt>
	hints.ai_flags = AI_CANONNAME; /* canonical name */
  401463:	c7 45 a8 02 00 00 00 	movl   $0x2,-0x58(%rbp)
	hints.ai_family = family;  /* AF_UNSPEC, AF_INET, etc. */
  40146a:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  40146d:	89 4d ac             	mov    %ecx,-0x54(%rbp)
	hints.ai_socktype = socktype;  /* 0, SOCK_STREAM, SOCK_DGRAM, etc. */
  401470:	8b 4d e0             	mov    -0x20(%rbp),%ecx
  401473:	89 4d b0             	mov    %ecx,-0x50(%rbp)
	if ((n = getaddrinfo(host, port, &hints, &res)) != 0)
  401476:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  40147a:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40147e:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  401482:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
  401486:	e8 c5 f9 ff ff       	callq  400e50 <getaddrinfo@plt>
  40148b:	89 45 dc             	mov    %eax,-0x24(%rbp)
  40148e:	83 f8 00             	cmp    $0x0,%eax
  401491:	0f 84 0d 00 00 00    	je     4014a4 <host_serv+0x84>
		return NULL;
  401497:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40149e:	00 
  40149f:	e9 08 00 00 00       	jmpq   4014ac <host_serv+0x8c>
	return res;
  4014a4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4014a8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
}
  4014ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4014b0:	48 83 c4 70          	add    $0x70,%rsp
  4014b4:	5d                   	pop    %rbp
  4014b5:	c3                   	retq   
  4014b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4014bd:	00 00 00 

00000000004014c0 <sock_ntop>:

const char *sock_ntop(const struct sockaddr *sa)
{
  4014c0:	55                   	push   %rbp
  4014c1:	48 89 e5             	mov    %rsp,%rbp
  4014c4:	48 83 ec 70          	sub    $0x70,%rsp
  4014c8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
	static char str[45]; /* X:X:X:X:X:X:a.b.c.d, so it is 45 characters */
	char portstr[8];

	switch (sa->sa_family) {
  4014cc:	0f b7 07             	movzwl (%rdi),%eax
  4014cf:	89 c1                	mov    %eax,%ecx
  4014d1:	83 e9 02             	sub    $0x2,%ecx
  4014d4:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  4014d7:	89 4d d0             	mov    %ecx,-0x30(%rbp)
  4014da:	0f 84 19 00 00 00    	je     4014f9 <sock_ntop+0x39>
  4014e0:	e9 00 00 00 00       	jmpq   4014e5 <sock_ntop+0x25>
  4014e5:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  4014e8:	83 e8 0a             	sub    $0xa,%eax
  4014eb:	89 45 cc             	mov    %eax,-0x34(%rbp)
  4014ee:	0f 84 ab 00 00 00    	je     40159f <sock_ntop+0xdf>
  4014f4:	e9 5b 01 00 00       	jmpq   401654 <sock_ntop+0x194>
  4014f9:	bf 02 00 00 00       	mov    $0x2,%edi
  4014fe:	48 ba 50 31 60 00 00 	movabs $0x603150,%rdx
  401505:	00 00 00 
  401508:	b9 2d 00 00 00       	mov    $0x2d,%ecx
		case AF_INET: {
			struct sockaddr_in *sin = (struct sockaddr_in *) sa;
  40150d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401511:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
			if (inet_ntop(AF_INET, &sin->sin_addr, str, sizeof(str)) == NULL)
  401515:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  401519:	48 83 c0 04          	add    $0x4,%rax
  40151d:	48 89 c6             	mov    %rax,%rsi
  401520:	e8 5b f7 ff ff       	callq  400c80 <inet_ntop@plt>
  401525:	48 83 f8 00          	cmp    $0x0,%rax
  401529:	0f 85 0d 00 00 00    	jne    40153c <sock_ntop+0x7c>
				return NULL;
  40152f:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  401536:	00 
  401537:	e9 52 01 00 00       	jmpq   40168e <sock_ntop+0x1ce>
  40153c:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
			snprintf(portstr, sizeof(portstr), ":%hu", ntohs(sin->sin_port));
  401540:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  401544:	0f b7 48 02          	movzwl 0x2(%rax),%ecx
  401548:	48 89 7d c0          	mov    %rdi,-0x40(%rbp)
  40154c:	89 cf                	mov    %ecx,%edi
  40154e:	e8 7d f8 ff ff       	callq  400dd0 <ntohs@plt>
  401553:	b9 08 00 00 00       	mov    $0x8,%ecx
  401558:	89 ce                	mov    %ecx,%esi
  40155a:	48 ba 5c 27 40 00 00 	movabs $0x40275c,%rdx
  401561:	00 00 00 
  401564:	0f b7 c8             	movzwl %ax,%ecx
  401567:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  40156b:	b0 00                	mov    $0x0,%al
  40156d:	e8 9e f7 ff ff       	callq  400d10 <snprintf@plt>
  401572:	48 bf 50 31 60 00 00 	movabs $0x603150,%rdi
  401579:	00 00 00 
  40157c:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
			strcat(str, portstr);
  401580:	89 45 bc             	mov    %eax,-0x44(%rbp)
  401583:	e8 98 f8 ff ff       	callq  400e20 <strcat@plt>
  401588:	48 ba 50 31 60 00 00 	movabs $0x603150,%rdx
  40158f:	00 00 00 
			return str;
  401592:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
  401596:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40159a:	e9 ef 00 00 00       	jmpq   40168e <sock_ntop+0x1ce>
  40159f:	bf 0a 00 00 00       	mov    $0xa,%edi
  4015a4:	48 b8 50 31 60 00 00 	movabs $0x603150,%rax
  4015ab:	00 00 00 
  4015ae:	48 83 c0 01          	add    $0x1,%rax
  4015b2:	b9 2c 00 00 00       	mov    $0x2c,%ecx
		}
		case AF_INET6: {
			struct sockaddr_in6 *sin6 = (struct sockaddr_in6 *) sa;
  4015b7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4015bb:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
            str[0] = '[';
  4015bf:	c6 04 25 50 31 60 00 	movb   $0x5b,0x603150
  4015c6:	5b 
			if (inet_ntop(AF_INET6, &sin6->sin6_addr, str + 1, sizeof(str) - 1) == NULL)
  4015c7:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4015cb:	48 83 c2 08          	add    $0x8,%rdx
  4015cf:	48 89 d6             	mov    %rdx,%rsi
  4015d2:	48 89 c2             	mov    %rax,%rdx
  4015d5:	e8 a6 f6 ff ff       	callq  400c80 <inet_ntop@plt>
  4015da:	48 83 f8 00          	cmp    $0x0,%rax
  4015de:	0f 85 0d 00 00 00    	jne    4015f1 <sock_ntop+0x131>
				return NULL;
  4015e4:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  4015eb:	00 
  4015ec:	e9 9d 00 00 00       	jmpq   40168e <sock_ntop+0x1ce>
  4015f1:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
			snprintf(portstr, sizeof(portstr), "]:%hu", ntohs(sin6->sin6_port));
  4015f5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4015f9:	0f b7 48 02          	movzwl 0x2(%rax),%ecx
  4015fd:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  401601:	89 cf                	mov    %ecx,%edi
  401603:	e8 c8 f7 ff ff       	callq  400dd0 <ntohs@plt>
  401608:	b9 08 00 00 00       	mov    $0x8,%ecx
  40160d:	89 ce                	mov    %ecx,%esi
  40160f:	48 ba 5b 27 40 00 00 	movabs $0x40275b,%rdx
  401616:	00 00 00 
  401619:	0f b7 c8             	movzwl %ax,%ecx
  40161c:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
  401620:	b0 00                	mov    $0x0,%al
  401622:	e8 e9 f6 ff ff       	callq  400d10 <snprintf@plt>
  401627:	48 bf 50 31 60 00 00 	movabs $0x603150,%rdi
  40162e:	00 00 00 
  401631:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
			strcat(str, portstr);
  401635:	89 45 a4             	mov    %eax,-0x5c(%rbp)
  401638:	e8 e3 f7 ff ff       	callq  400e20 <strcat@plt>
  40163d:	48 ba 50 31 60 00 00 	movabs $0x603150,%rdx
  401644:	00 00 00 
			return str;
  401647:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
  40164b:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  40164f:	e9 3a 00 00 00       	jmpq   40168e <sock_ntop+0x1ce>
  401654:	48 bf 50 31 60 00 00 	movabs $0x603150,%rdi
  40165b:	00 00 00 
  40165e:	b8 2d 00 00 00       	mov    $0x2d,%eax
  401663:	89 c6                	mov    %eax,%esi
  401665:	48 ba 61 27 40 00 00 	movabs $0x402761,%rdx
  40166c:	00 00 00 
		}
		default:
			snprintf(str, sizeof(str), "sock_ntop: unknown AF_xxx: %d", sa->sa_family);
  40166f:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  401673:	0f b7 09             	movzwl (%rcx),%ecx
  401676:	b0 00                	mov    $0x0,%al
  401678:	e8 93 f6 ff ff       	callq  400d10 <snprintf@plt>
  40167d:	48 ba 50 31 60 00 00 	movabs $0x603150,%rdx
  401684:	00 00 00 
			return str;
  401687:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
  40168b:	89 45 94             	mov    %eax,-0x6c(%rbp)
	}
	return NULL;
}
  40168e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401692:	48 83 c4 70          	add    $0x70,%rsp
  401696:	5d                   	pop    %rbp
  401697:	c3                   	retq   
  401698:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40169f:	00 

00000000004016a0 <accept_e>:

/* handle SIGINTR for accept */
int accept_e(int sockfd, struct sockaddr *addr, socklen_t *addrlen)
{
  4016a0:	55                   	push   %rbp
  4016a1:	48 89 e5             	mov    %rsp,%rbp
  4016a4:	48 83 ec 20          	sub    $0x20,%rsp
  4016a8:	89 7d fc             	mov    %edi,-0x4(%rbp)
  4016ab:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4016af:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	int connfd;

	while (1) {
		if ((connfd = accept(sockfd, addr, addrlen)) < 0) {
  4016b3:	8b 7d fc             	mov    -0x4(%rbp),%edi
  4016b6:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  4016ba:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4016be:	e8 4d f7 ff ff       	callq  400e10 <accept@plt>
  4016c3:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  4016c6:	83 f8 00             	cmp    $0x0,%eax
  4016c9:	0f 8d 29 00 00 00    	jge    4016f8 <accept_e+0x58>
			if (errno == EINTR)
  4016cf:	e8 cc f5 ff ff       	callq  400ca0 <__errno_location@plt>
  4016d4:	83 38 04             	cmpl   $0x4,(%rax)
  4016d7:	0f 85 05 00 00 00    	jne    4016e2 <accept_e+0x42>
				continue;
  4016dd:	e9 d1 ff ff ff       	jmpq   4016b3 <accept_e+0x13>
  4016e2:	48 bf 7f 27 40 00 00 	movabs $0x40277f,%rdi
  4016e9:	00 00 00 
			else
				esys("accept error");
  4016ec:	b0 00                	mov    $0x0,%al
  4016ee:	e8 1d 00 00 00       	callq  401710 <esys>
		} else {
  4016f3:	e9 09 00 00 00       	jmpq   401701 <accept_e+0x61>
			return connfd;
  4016f8:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  4016fb:	48 83 c4 20          	add    $0x20,%rsp
  4016ff:	5d                   	pop    %rbp
  401700:	c3                   	retq   
/* handle SIGINTR for accept */
int accept_e(int sockfd, struct sockaddr *addr, socklen_t *addrlen)
{
	int connfd;

	while (1) {
  401701:	e9 ad ff ff ff       	jmpq   4016b3 <accept_e+0x13>
  401706:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40170d:	00 00 00 

0000000000401710 <esys>:
    va_end(ap);
    exit(EXIT_SUCCESS);
}

void esys(const char *fmt, ...)
{
  401710:	55                   	push   %rbp
  401711:	48 89 e5             	mov    %rsp,%rbp
  401714:	48 81 ec 90 01 00 00 	sub    $0x190,%rsp
  40171b:	84 c0                	test   %al,%al
  40171d:	0f 29 bd 20 ff ff ff 	movaps %xmm7,-0xe0(%rbp)
  401724:	0f 29 b5 10 ff ff ff 	movaps %xmm6,-0xf0(%rbp)
  40172b:	0f 29 ad 00 ff ff ff 	movaps %xmm5,-0x100(%rbp)
  401732:	0f 29 a5 f0 fe ff ff 	movaps %xmm4,-0x110(%rbp)
  401739:	0f 29 9d e0 fe ff ff 	movaps %xmm3,-0x120(%rbp)
  401740:	0f 29 95 d0 fe ff ff 	movaps %xmm2,-0x130(%rbp)
  401747:	0f 29 8d c0 fe ff ff 	movaps %xmm1,-0x140(%rbp)
  40174e:	0f 29 85 b0 fe ff ff 	movaps %xmm0,-0x150(%rbp)
  401755:	48 89 bd a8 fe ff ff 	mov    %rdi,-0x158(%rbp)
  40175c:	4c 89 8d a0 fe ff ff 	mov    %r9,-0x160(%rbp)
  401763:	4c 89 85 98 fe ff ff 	mov    %r8,-0x168(%rbp)
  40176a:	48 89 8d 90 fe ff ff 	mov    %rcx,-0x170(%rbp)
  401771:	48 89 95 88 fe ff ff 	mov    %rdx,-0x178(%rbp)
  401778:	48 89 b5 80 fe ff ff 	mov    %rsi,-0x180(%rbp)
  40177f:	0f 84 5e 00 00 00    	je     4017e3 <esys+0xd3>
  401785:	0f 28 85 b0 fe ff ff 	movaps -0x150(%rbp),%xmm0
  40178c:	0f 29 85 60 ff ff ff 	movaps %xmm0,-0xa0(%rbp)
  401793:	0f 28 8d c0 fe ff ff 	movaps -0x140(%rbp),%xmm1
  40179a:	0f 29 8d 70 ff ff ff 	movaps %xmm1,-0x90(%rbp)
  4017a1:	0f 28 95 d0 fe ff ff 	movaps -0x130(%rbp),%xmm2
  4017a8:	0f 29 55 80          	movaps %xmm2,-0x80(%rbp)
  4017ac:	0f 28 9d e0 fe ff ff 	movaps -0x120(%rbp),%xmm3
  4017b3:	0f 29 5d 90          	movaps %xmm3,-0x70(%rbp)
  4017b7:	0f 28 a5 f0 fe ff ff 	movaps -0x110(%rbp),%xmm4
  4017be:	0f 29 65 a0          	movaps %xmm4,-0x60(%rbp)
  4017c2:	0f 28 ad 00 ff ff ff 	movaps -0x100(%rbp),%xmm5
  4017c9:	0f 29 6d b0          	movaps %xmm5,-0x50(%rbp)
  4017cd:	0f 28 b5 10 ff ff ff 	movaps -0xf0(%rbp),%xmm6
  4017d4:	0f 29 75 c0          	movaps %xmm6,-0x40(%rbp)
  4017d8:	0f 28 bd 20 ff ff ff 	movaps -0xe0(%rbp),%xmm7
  4017df:	0f 29 7d d0          	movaps %xmm7,-0x30(%rbp)
  4017e3:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
  4017ea:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  4017f1:	48 8b 8d 98 fe ff ff 	mov    -0x168(%rbp),%rcx
  4017f8:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
  4017ff:	48 8b 95 90 fe ff ff 	mov    -0x170(%rbp),%rdx
  401806:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  40180d:	48 8b b5 88 fe ff ff 	mov    -0x178(%rbp),%rsi
  401814:	48 89 b5 40 ff ff ff 	mov    %rsi,-0xc0(%rbp)
  40181b:	48 8b bd 80 fe ff ff 	mov    -0x180(%rbp),%rdi
  401822:	48 89 bd 38 ff ff ff 	mov    %rdi,-0xc8(%rbp)
  401829:	4c 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%r8
  401830:	bf 01 00 00 00       	mov    $0x1,%edi
  401835:	4c 8d 4d e0          	lea    -0x20(%rbp),%r9
  401839:	4c 89 45 f8          	mov    %r8,-0x8(%rbp)
    va_list ap;

    va_start(ap, fmt);
  40183d:	4d 89 c8             	mov    %r9,%r8
  401840:	4c 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%r10
  401847:	4d 89 50 10          	mov    %r10,0x10(%r8)
  40184b:	4c 8d 55 10          	lea    0x10(%rbp),%r10
  40184f:	4d 89 50 08          	mov    %r10,0x8(%r8)
  401853:	41 c7 40 04 30 00 00 	movl   $0x30,0x4(%r8)
  40185a:	00 
  40185b:	41 c7 00 08 00 00 00 	movl   $0x8,(%r8)
    edoit(1, fmt, ap);
  401862:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  401866:	4c 89 ca             	mov    %r9,%rdx
  401869:	e8 42 0a 00 00       	callq  4022b0 <edoit>
  40186e:	bf 01 00 00 00       	mov    $0x1,%edi
  401873:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    va_end(ap);
    exit(EXIT_FAILURE);
  401877:	48 89 85 78 fe ff ff 	mov    %rax,-0x188(%rbp)
  40187e:	e8 ad f5 ff ff       	callq  400e30 <exit@plt>
  401883:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  40188a:	84 00 00 00 00 00 

0000000000401890 <writen>:
		}
	}
}

ssize_t writen(int fd, const void *buf, size_t n)
{
  401890:	55                   	push   %rbp
  401891:	48 89 e5             	mov    %rsp,%rbp
  401894:	48 83 ec 20          	sub    $0x20,%rsp
  401898:	89 7d fc             	mov    %edi,-0x4(%rbp)
  40189b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40189f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	ssize_t nwrite;

	while (1) {
		if ((nwrite = write(fd, buf, n)) < 0) {
  4018a3:	8b 7d fc             	mov    -0x4(%rbp),%edi
  4018a6:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  4018aa:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4018ae:	e8 2d f4 ff ff       	callq  400ce0 <write@plt>
  4018b3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  4018b7:	48 83 f8 00          	cmp    $0x0,%rax
  4018bb:	0f 8d 31 00 00 00    	jge    4018f2 <writen+0x62>
			if (errno == EINTR) {
  4018c1:	e8 da f3 ff ff       	callq  400ca0 <__errno_location@plt>
  4018c6:	83 38 04             	cmpl   $0x4,(%rax)
  4018c9:	0f 85 0d 00 00 00    	jne    4018dc <writen+0x4c>
				nwrite = 0;
  4018cf:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  4018d6:	00 
			} else {
  4018d7:	e9 11 00 00 00       	jmpq   4018ed <writen+0x5d>
  4018dc:	48 bf 8c 27 40 00 00 	movabs $0x40278c,%rdi
  4018e3:	00 00 00 
				esys("writen error");
  4018e6:	b0 00                	mov    $0x0,%al
  4018e8:	e8 23 fe ff ff       	callq  401710 <esys>
			}
		} else {
  4018ed:	e9 05 00 00 00       	jmpq   4018f7 <writen+0x67>
			break;
  4018f2:	e9 05 00 00 00       	jmpq   4018fc <writen+0x6c>

ssize_t writen(int fd, const void *buf, size_t n)
{
	ssize_t nwrite;

	while (1) {
  4018f7:	e9 a7 ff ff ff       	jmpq   4018a3 <writen+0x13>
			}
		} else {
			break;
		}
	}
	return nwrite;
  4018fc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  401900:	48 83 c4 20          	add    $0x20,%rsp
  401904:	5d                   	pop    %rbp
  401905:	c3                   	retq   
  401906:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40190d:	00 00 00 

0000000000401910 <readn>:
}

ssize_t readn(int fd, void *buf, size_t n)
{
  401910:	55                   	push   %rbp
  401911:	48 89 e5             	mov    %rsp,%rbp
  401914:	48 83 ec 30          	sub    $0x30,%rsp
  401918:	89 7d fc             	mov    %edi,-0x4(%rbp)
  40191b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40191f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	ssize_t nread;

	while (1) {
		if ((nread = read(fd, buf, n)) < 0) {
  401923:	8b 7d fc             	mov    -0x4(%rbp),%edi
  401926:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  40192a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40192e:	e8 3d f4 ff ff       	callq  400d70 <read@plt>
  401933:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  401937:	48 83 f8 00          	cmp    $0x0,%rax
  40193b:	0f 8d 42 00 00 00    	jge    401983 <readn+0x73>
			if (errno == EINTR) {
  401941:	e8 5a f3 ff ff       	callq  400ca0 <__errno_location@plt>
  401946:	83 38 04             	cmpl   $0x4,(%rax)
  401949:	0f 85 0d 00 00 00    	jne    40195c <readn+0x4c>
				nread = 0;
  40194f:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  401956:	00 
			} else {
  401957:	e9 22 00 00 00       	jmpq   40197e <readn+0x6e>
				esys("readn error: %d, tid: %ld", fd, pthread_self());
  40195c:	8b 75 fc             	mov    -0x4(%rbp),%esi
  40195f:	89 75 dc             	mov    %esi,-0x24(%rbp)
  401962:	e8 99 f4 ff ff       	callq  400e00 <pthread_self@plt>
  401967:	48 bf 99 27 40 00 00 	movabs $0x402799,%rdi
  40196e:	00 00 00 
  401971:	8b 75 dc             	mov    -0x24(%rbp),%esi
  401974:	48 89 c2             	mov    %rax,%rdx
  401977:	b0 00                	mov    $0x0,%al
  401979:	e8 92 fd ff ff       	callq  401710 <esys>
			}
		} else {
  40197e:	e9 05 00 00 00       	jmpq   401988 <readn+0x78>
			break;
  401983:	e9 05 00 00 00       	jmpq   40198d <readn+0x7d>

ssize_t readn(int fd, void *buf, size_t n)
{
	ssize_t nread;

	while (1) {
  401988:	e9 96 ff ff ff       	jmpq   401923 <readn+0x13>
			}
		} else {
			break;
		}
	}
	return nread;
  40198d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  401991:	48 83 c4 30          	add    $0x30,%rsp
  401995:	5d                   	pop    %rbp
  401996:	c3                   	retq   
  401997:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40199e:	00 00 

00000000004019a0 <tcp_listen>:
}

/* addrlenp can be NULL, it is not necessary for TCP */
int tcp_listen(const char *host,
		const char *port, socklen_t *addrlenp)
{
  4019a0:	55                   	push   %rbp
  4019a1:	48 89 e5             	mov    %rsp,%rbp
  4019a4:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
  4019ab:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  4019af:	48 8d 4d a8          	lea    -0x58(%rbp),%rcx
  4019b3:	45 31 c0             	xor    %r8d,%r8d
  4019b6:	41 b9 30 00 00 00    	mov    $0x30,%r9d
  4019bc:	45 89 ca             	mov    %r9d,%r10d
  4019bf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4019c3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4019c7:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	int fd, n;
	struct addrinfo hints, *res, *ressave;
	const int on = 1;
  4019cb:	c7 45 9c 01 00 00 00 	movl   $0x1,-0x64(%rbp)

	memset(&hints, 0, sizeof(struct addrinfo));
  4019d2:	48 89 c2             	mov    %rax,%rdx
  4019d5:	48 89 d7             	mov    %rdx,%rdi
  4019d8:	44 89 c6             	mov    %r8d,%esi
  4019db:	4c 89 d2             	mov    %r10,%rdx
  4019de:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  4019e2:	48 89 4d 88          	mov    %rcx,-0x78(%rbp)
  4019e6:	e8 65 f3 ff ff       	callq  400d50 <memset@plt>
	hints.ai_flags = AI_PASSIVE;
  4019eb:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%rbp)
	hints.ai_family = AF_UNSPEC;
  4019f2:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
	hints.ai_socktype = SOCK_STREAM;
  4019f9:	c7 45 b8 01 00 00 00 	movl   $0x1,-0x48(%rbp)

	if ((n = getaddrinfo(host, port, &hints, &res)) != 0)
  401a00:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  401a04:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  401a08:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  401a0c:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
  401a10:	e8 3b f4 ff ff       	callq  400e50 <getaddrinfo@plt>
  401a15:	89 45 e0             	mov    %eax,-0x20(%rbp)
  401a18:	83 f8 00             	cmp    $0x0,%eax
  401a1b:	0f 84 41 00 00 00    	je     401a62 <tcp_listen+0xc2>
		error(EXIT_FAILURE, 0, "tcp_listen error for %s, %s: %s", host, port, gai_strerror(n));
  401a21:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  401a25:	4c 8b 45 f0          	mov    -0x10(%rbp),%r8
  401a29:	8b 7d e0             	mov    -0x20(%rbp),%edi
  401a2c:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
  401a30:	4c 89 85 78 ff ff ff 	mov    %r8,-0x88(%rbp)
  401a37:	e8 e4 f2 ff ff       	callq  400d20 <gai_strerror@plt>
  401a3c:	bf 01 00 00 00       	mov    $0x1,%edi
  401a41:	31 f6                	xor    %esi,%esi
  401a43:	48 ba b3 27 40 00 00 	movabs $0x4027b3,%rdx
  401a4a:	00 00 00 
  401a4d:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
  401a51:	4c 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%r8
  401a58:	49 89 c1             	mov    %rax,%r9
  401a5b:	b0 00                	mov    $0x0,%al
  401a5d:	e8 8e f3 ff ff       	callq  400df0 <error@plt>
	ressave = res;
  401a62:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  401a66:	48 89 45 a0          	mov    %rax,-0x60(%rbp)

	do {
		fd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);
  401a6a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  401a6e:	8b 78 04             	mov    0x4(%rax),%edi
  401a71:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  401a75:	8b 70 08             	mov    0x8(%rax),%esi
  401a78:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  401a7c:	8b 50 0c             	mov    0xc(%rax),%edx
  401a7f:	e8 0c f4 ff ff       	callq  400e90 <socket@plt>
  401a84:	89 45 e4             	mov    %eax,-0x1c(%rbp)
		if (fd < 0)
  401a87:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  401a8b:	0f 8d 05 00 00 00    	jge    401a96 <tcp_listen+0xf6>
			continue;
  401a91:	e9 85 00 00 00       	jmpq   401b1b <tcp_listen+0x17b>
  401a96:	be 01 00 00 00       	mov    $0x1,%esi
  401a9b:	ba 02 00 00 00       	mov    $0x2,%edx
  401aa0:	41 b8 04 00 00 00    	mov    $0x4,%r8d
  401aa6:	48 8d 45 9c          	lea    -0x64(%rbp),%rax
		if (setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, &on, sizeof(on)) < 0)
  401aaa:	8b 7d e4             	mov    -0x1c(%rbp),%edi
  401aad:	48 89 c1             	mov    %rax,%rcx
  401ab0:	e8 0b f2 ff ff       	callq  400cc0 <setsockopt@plt>
  401ab5:	83 f8 00             	cmp    $0x0,%eax
  401ab8:	0f 8d 11 00 00 00    	jge    401acf <tcp_listen+0x12f>
  401abe:	48 bf d3 27 40 00 00 	movabs $0x4027d3,%rdi
  401ac5:	00 00 00 
			esys("setsockopt error");
  401ac8:	b0 00                	mov    $0x0,%al
  401aca:	e8 41 fc ff ff       	callq  401710 <esys>
		if (bind(fd, res->ai_addr, res->ai_addrlen) == 0)
  401acf:	8b 7d e4             	mov    -0x1c(%rbp),%edi
  401ad2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  401ad6:	48 8b 70 18          	mov    0x18(%rax),%rsi
  401ada:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  401ade:	8b 50 10             	mov    0x10(%rax),%edx
  401ae1:	e8 fa f2 ff ff       	callq  400de0 <bind@plt>
  401ae6:	83 f8 00             	cmp    $0x0,%eax
  401ae9:	0f 85 05 00 00 00    	jne    401af4 <tcp_listen+0x154>
			break;
  401aef:	e9 3d 00 00 00       	jmpq   401b31 <tcp_listen+0x191>
		if (close(fd) < 0)
  401af4:	8b 7d e4             	mov    -0x1c(%rbp),%edi
  401af7:	e8 64 f2 ff ff       	callq  400d60 <close@plt>
  401afc:	83 f8 00             	cmp    $0x0,%eax
  401aff:	0f 8d 11 00 00 00    	jge    401b16 <tcp_listen+0x176>
  401b05:	48 bf e4 27 40 00 00 	movabs $0x4027e4,%rdi
  401b0c:	00 00 00 
			esys("close error");
  401b0f:	b0 00                	mov    $0x0,%al
  401b11:	e8 fa fb ff ff       	callq  401710 <esys>
	} while ((res = res->ai_next) != NULL);
  401b16:	e9 00 00 00 00       	jmpq   401b1b <tcp_listen+0x17b>
  401b1b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  401b1f:	48 8b 40 28          	mov    0x28(%rax),%rax
  401b23:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  401b27:	48 83 f8 00          	cmp    $0x0,%rax
  401b2b:	0f 85 39 ff ff ff    	jne    401a6a <tcp_listen+0xca>

	if (res == NULL)
  401b31:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  401b36:	0f 85 25 00 00 00    	jne    401b61 <tcp_listen+0x1c1>
		error(EXIT_FAILURE, errno, "tcp_listen error for %s, %s", host, port);
  401b3c:	e8 5f f1 ff ff       	callq  400ca0 <__errno_location@plt>
  401b41:	bf 01 00 00 00       	mov    $0x1,%edi
  401b46:	48 ba f0 27 40 00 00 	movabs $0x4027f0,%rdx
  401b4d:	00 00 00 
  401b50:	8b 30                	mov    (%rax),%esi
  401b52:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  401b56:	4c 8b 45 f0          	mov    -0x10(%rbp),%r8
  401b5a:	b0 00                	mov    $0x0,%al
  401b5c:	e8 8f f2 ff ff       	callq  400df0 <error@plt>
  401b61:	be 0a 00 00 00       	mov    $0xa,%esi
	if (listen(fd, LISTENQ) < 0)
  401b66:	8b 7d e4             	mov    -0x1c(%rbp),%edi
  401b69:	e8 52 f2 ff ff       	callq  400dc0 <listen@plt>
  401b6e:	83 f8 00             	cmp    $0x0,%eax
  401b71:	0f 8d 1d 00 00 00    	jge    401b94 <tcp_listen+0x1f4>
		error(EXIT_FAILURE, errno, "listen error");
  401b77:	e8 24 f1 ff ff       	callq  400ca0 <__errno_location@plt>
  401b7c:	bf 01 00 00 00       	mov    $0x1,%edi
  401b81:	48 ba 0c 28 40 00 00 	movabs $0x40280c,%rdx
  401b88:	00 00 00 
  401b8b:	8b 30                	mov    (%rax),%esi
  401b8d:	b0 00                	mov    $0x0,%al
  401b8f:	e8 5c f2 ff ff       	callq  400df0 <error@plt>
	if (addrlenp)
  401b94:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  401b99:	0f 84 0d 00 00 00    	je     401bac <tcp_listen+0x20c>
		*addrlenp = res->ai_addrlen;
  401b9f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  401ba3:	8b 48 10             	mov    0x10(%rax),%ecx
  401ba6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401baa:	89 08                	mov    %ecx,(%rax)

	freeaddrinfo(ressave);
  401bac:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  401bb0:	e8 cb f2 ff ff       	callq  400e80 <freeaddrinfo@plt>

	return fd;
  401bb5:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  401bb8:	48 81 c4 90 00 00 00 	add    $0x90,%rsp
  401bbf:	5d                   	pop    %rbp
  401bc0:	c3                   	retq   
  401bc1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  401bc8:	0f 1f 84 00 00 00 00 
  401bcf:	00 

0000000000401bd0 <tcp_connect>:
}

int tcp_connect(const char *host, const char *port)
{
  401bd0:	55                   	push   %rbp
  401bd1:	48 89 e5             	mov    %rsp,%rbp
  401bd4:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
  401bdb:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  401bdf:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
  401be3:	31 d2                	xor    %edx,%edx
  401be5:	41 b8 30 00 00 00    	mov    $0x30,%r8d
  401beb:	45 89 c1             	mov    %r8d,%r9d
  401bee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401bf2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	int fd, n;
	struct addrinfo hints, *res, *ressave;

	memset(&hints, 0, sizeof(struct addrinfo));
  401bf6:	48 89 c6             	mov    %rax,%rsi
  401bf9:	48 89 f7             	mov    %rsi,%rdi
  401bfc:	89 d6                	mov    %edx,%esi
  401bfe:	4c 89 ca             	mov    %r9,%rdx
  401c01:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  401c05:	48 89 4d 98          	mov    %rcx,-0x68(%rbp)
  401c09:	e8 42 f1 ff ff       	callq  400d50 <memset@plt>
	hints.ai_family = AF_UNSPEC;
  401c0e:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%rbp)
	hints.ai_socktype = SOCK_STREAM;
  401c15:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%rbp)

	if ((n = getaddrinfo(host, port, &hints, &res)) != 0)
  401c1c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  401c20:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  401c24:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  401c28:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
  401c2c:	e8 1f f2 ff ff       	callq  400e50 <getaddrinfo@plt>
  401c31:	89 45 e8             	mov    %eax,-0x18(%rbp)
  401c34:	83 f8 00             	cmp    $0x0,%eax
  401c37:	0f 84 3b 00 00 00    	je     401c78 <tcp_connect+0xa8>
		error(EXIT_FAILURE, 0, "tcp_connect error for %s, %s: %s", host, port, gai_strerror(n));
  401c3d:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  401c41:	4c 8b 45 f0          	mov    -0x10(%rbp),%r8
  401c45:	8b 7d e8             	mov    -0x18(%rbp),%edi
  401c48:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  401c4c:	4c 89 45 88          	mov    %r8,-0x78(%rbp)
  401c50:	e8 cb f0 ff ff       	callq  400d20 <gai_strerror@plt>
  401c55:	bf 01 00 00 00       	mov    $0x1,%edi
  401c5a:	31 f6                	xor    %esi,%esi
  401c5c:	48 ba 19 28 40 00 00 	movabs $0x402819,%rdx
  401c63:	00 00 00 
  401c66:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
  401c6a:	4c 8b 45 88          	mov    -0x78(%rbp),%r8
  401c6e:	49 89 c1             	mov    %rax,%r9
  401c71:	b0 00                	mov    $0x0,%al
  401c73:	e8 78 f1 ff ff       	callq  400df0 <error@plt>
	ressave = res;
  401c78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401c7c:	48 89 45 a8          	mov    %rax,-0x58(%rbp)

	do {
		fd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);
  401c80:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401c84:	8b 78 04             	mov    0x4(%rax),%edi
  401c87:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401c8b:	8b 70 08             	mov    0x8(%rax),%esi
  401c8e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401c92:	8b 50 0c             	mov    0xc(%rax),%edx
  401c95:	e8 f6 f1 ff ff       	callq  400e90 <socket@plt>
  401c9a:	89 45 ec             	mov    %eax,-0x14(%rbp)
		if (fd < 0)
  401c9d:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  401ca1:	0f 8d 05 00 00 00    	jge    401cac <tcp_connect+0xdc>
			continue;
  401ca7:	e9 4c 00 00 00       	jmpq   401cf8 <tcp_connect+0x128>
		if (connect(fd, res->ai_addr, res->ai_addrlen) == 0)
  401cac:	8b 7d ec             	mov    -0x14(%rbp),%edi
  401caf:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401cb3:	48 8b 70 18          	mov    0x18(%rax),%rsi
  401cb7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401cbb:	8b 50 10             	mov    0x10(%rax),%edx
  401cbe:	e8 7d f1 ff ff       	callq  400e40 <connect@plt>
  401cc3:	83 f8 00             	cmp    $0x0,%eax
  401cc6:	0f 85 05 00 00 00    	jne    401cd1 <tcp_connect+0x101>
			break;         /* Success */
  401ccc:	e9 3d 00 00 00       	jmpq   401d0e <tcp_connect+0x13e>
		if (close(fd) < 0)
  401cd1:	8b 7d ec             	mov    -0x14(%rbp),%edi
  401cd4:	e8 87 f0 ff ff       	callq  400d60 <close@plt>
  401cd9:	83 f8 00             	cmp    $0x0,%eax
  401cdc:	0f 8d 11 00 00 00    	jge    401cf3 <tcp_connect+0x123>
  401ce2:	48 bf e4 27 40 00 00 	movabs $0x4027e4,%rdi
  401ce9:	00 00 00 
			esys("close error");
  401cec:	b0 00                	mov    $0x0,%al
  401cee:	e8 1d fa ff ff       	callq  401710 <esys>
	} while ((res = res->ai_next) != NULL);
  401cf3:	e9 00 00 00 00       	jmpq   401cf8 <tcp_connect+0x128>
  401cf8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401cfc:	48 8b 40 28          	mov    0x28(%rax),%rax
  401d00:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  401d04:	48 83 f8 00          	cmp    $0x0,%rax
  401d08:	0f 85 72 ff ff ff    	jne    401c80 <tcp_connect+0xb0>

	if (res == NULL)
  401d0e:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  401d13:	0f 85 25 00 00 00    	jne    401d3e <tcp_connect+0x16e>
		error(EXIT_FAILURE, errno, "tcp_connect error for %s, %s", host, port);
  401d19:	e8 82 ef ff ff       	callq  400ca0 <__errno_location@plt>
  401d1e:	bf 01 00 00 00       	mov    $0x1,%edi
  401d23:	48 ba 3a 28 40 00 00 	movabs $0x40283a,%rdx
  401d2a:	00 00 00 
  401d2d:	8b 30                	mov    (%rax),%esi
  401d2f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  401d33:	4c 8b 45 f0          	mov    -0x10(%rbp),%r8
  401d37:	b0 00                	mov    $0x0,%al
  401d39:	e8 b2 f0 ff ff       	callq  400df0 <error@plt>

	freeaddrinfo(ressave);
  401d3e:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
  401d42:	e8 39 f1 ff ff       	callq  400e80 <freeaddrinfo@plt>

	return fd;
  401d47:	8b 45 ec             	mov    -0x14(%rbp),%eax
  401d4a:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
  401d51:	5d                   	pop    %rbp
  401d52:	c3                   	retq   
  401d53:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  401d5a:	84 00 00 00 00 00 

0000000000401d60 <udp_client>:

/* saptr and len will be used in sendto(), and len cannot be NULL
 * because sendto() and recvfrom() always need it */
int udp_client(const char *host, const char *port,
		struct sockaddr **saptr, socklen_t *len)
{
  401d60:	55                   	push   %rbp
  401d61:	48 89 e5             	mov    %rsp,%rbp
  401d64:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
  401d6b:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
  401d6f:	4c 8d 45 a0          	lea    -0x60(%rbp),%r8
  401d73:	45 31 c9             	xor    %r9d,%r9d
  401d76:	41 ba 30 00 00 00    	mov    $0x30,%r10d
  401d7c:	45 89 d3             	mov    %r10d,%r11d
  401d7f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401d83:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  401d87:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  401d8b:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	int fd, n;
	struct addrinfo hints, *res, *ressave;

	memset(&hints, 0, sizeof(struct addrinfo));
  401d8f:	48 89 c1             	mov    %rax,%rcx
  401d92:	48 89 cf             	mov    %rcx,%rdi
  401d95:	44 89 ce             	mov    %r9d,%esi
  401d98:	4c 89 da             	mov    %r11,%rdx
  401d9b:	4c 89 45 90          	mov    %r8,-0x70(%rbp)
  401d9f:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  401da3:	e8 a8 ef ff ff       	callq  400d50 <memset@plt>
	hints.ai_family = AF_UNSPEC;
  401da8:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%rbp)
	hints.ai_socktype = SOCK_DGRAM;
  401daf:	c7 45 b0 02 00 00 00 	movl   $0x2,-0x50(%rbp)

	if ((n = getaddrinfo(host, port, &hints, &res)) != 0)
  401db6:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  401dba:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  401dbe:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  401dc2:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
  401dc6:	e8 85 f0 ff ff       	callq  400e50 <getaddrinfo@plt>
  401dcb:	89 45 d8             	mov    %eax,-0x28(%rbp)
  401dce:	83 f8 00             	cmp    $0x0,%eax
  401dd1:	0f 84 41 00 00 00    	je     401e18 <udp_client+0xb8>
		error(EXIT_FAILURE, 0, "udp_client error for %s, %s: %s", host, port, gai_strerror(n));
  401dd7:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  401ddb:	4c 8b 45 f0          	mov    -0x10(%rbp),%r8
  401ddf:	8b 7d d8             	mov    -0x28(%rbp),%edi
  401de2:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
  401de6:	4c 89 85 78 ff ff ff 	mov    %r8,-0x88(%rbp)
  401ded:	e8 2e ef ff ff       	callq  400d20 <gai_strerror@plt>
  401df2:	bf 01 00 00 00       	mov    $0x1,%edi
  401df7:	31 f6                	xor    %esi,%esi
  401df9:	48 ba 57 28 40 00 00 	movabs $0x402857,%rdx
  401e00:	00 00 00 
  401e03:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
  401e07:	4c 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%r8
  401e0e:	49 89 c1             	mov    %rax,%r9
  401e11:	b0 00                	mov    $0x0,%al
  401e13:	e8 d8 ef ff ff       	callq  400df0 <error@plt>
	ressave = res;
  401e18:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401e1c:	48 89 45 98          	mov    %rax,-0x68(%rbp)

	do {
		fd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);
  401e20:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401e24:	8b 78 04             	mov    0x4(%rax),%edi
  401e27:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401e2b:	8b 70 08             	mov    0x8(%rax),%esi
  401e2e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401e32:	8b 50 0c             	mov    0xc(%rax),%edx
  401e35:	e8 56 f0 ff ff       	callq  400e90 <socket@plt>
  401e3a:	89 45 dc             	mov    %eax,-0x24(%rbp)
		if (fd >= 0)     /* Success */
  401e3d:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  401e41:	0f 8c 05 00 00 00    	jl     401e4c <udp_client+0xec>
			break;
  401e47:	e9 1b 00 00 00       	jmpq   401e67 <udp_client+0x107>
	} while ((res = res->ai_next) != NULL);
  401e4c:	e9 00 00 00 00       	jmpq   401e51 <udp_client+0xf1>
  401e51:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401e55:	48 8b 40 28          	mov    0x28(%rax),%rax
  401e59:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  401e5d:	48 83 f8 00          	cmp    $0x0,%rax
  401e61:	0f 85 b9 ff ff ff    	jne    401e20 <udp_client+0xc0>

	if (res == NULL)
  401e67:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
  401e6c:	0f 85 25 00 00 00    	jne    401e97 <udp_client+0x137>
		error(EXIT_FAILURE, errno, "udp_client error for %s, %s", host, port);
  401e72:	e8 29 ee ff ff       	callq  400ca0 <__errno_location@plt>
  401e77:	bf 01 00 00 00       	mov    $0x1,%edi
  401e7c:	48 ba 77 28 40 00 00 	movabs $0x402877,%rdx
  401e83:	00 00 00 
  401e86:	8b 30                	mov    (%rax),%esi
  401e88:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  401e8c:	4c 8b 45 f0          	mov    -0x10(%rbp),%r8
  401e90:	b0 00                	mov    $0x0,%al
  401e92:	e8 59 ef ff ff       	callq  400df0 <error@plt>

	*saptr = (struct sockaddr *)malloc(res->ai_addrlen);
  401e97:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401e9b:	8b 48 10             	mov    0x10(%rax),%ecx
  401e9e:	89 cf                	mov    %ecx,%edi
  401ea0:	e8 fb ee ff ff       	callq  400da0 <malloc@plt>
  401ea5:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  401ea9:	48 89 07             	mov    %rax,(%rdi)
	if (*saptr == NULL)
  401eac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401eb0:	48 83 38 00          	cmpq   $0x0,(%rax)
  401eb4:	0f 85 1d 00 00 00    	jne    401ed7 <udp_client+0x177>
		error(EXIT_FAILURE, errno, "malloc error");
  401eba:	e8 e1 ed ff ff       	callq  400ca0 <__errno_location@plt>
  401ebf:	bf 01 00 00 00       	mov    $0x1,%edi
  401ec4:	48 ba 93 28 40 00 00 	movabs $0x402893,%rdx
  401ecb:	00 00 00 
  401ece:	8b 30                	mov    (%rax),%esi
  401ed0:	b0 00                	mov    $0x0,%al
  401ed2:	e8 19 ef ff ff       	callq  400df0 <error@plt>
	memcpy(*saptr, res->ai_addr, res->ai_addrlen);
  401ed7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401edb:	48 8b 00             	mov    (%rax),%rax
  401ede:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  401ee2:	48 8b 49 18          	mov    0x18(%rcx),%rcx
  401ee6:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  401eea:	8b 72 10             	mov    0x10(%rdx),%esi
  401eed:	89 f2                	mov    %esi,%edx
  401eef:	48 89 c7             	mov    %rax,%rdi
  401ef2:	48 89 ce             	mov    %rcx,%rsi
  401ef5:	e8 96 ee ff ff       	callq  400d90 <memcpy@plt>
	*len = res->ai_addrlen;
  401efa:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401efe:	44 8b 40 10          	mov    0x10(%rax),%r8d
  401f02:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  401f06:	44 89 00             	mov    %r8d,(%rax)

	freeaddrinfo(ressave);
  401f09:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  401f0d:	e8 6e ef ff ff       	callq  400e80 <freeaddrinfo@plt>
	return fd;
  401f12:	8b 45 dc             	mov    -0x24(%rbp),%eax
  401f15:	48 81 c4 90 00 00 00 	add    $0x90,%rsp
  401f1c:	5d                   	pop    %rbp
  401f1d:	c3                   	retq   
  401f1e:	66 90                	xchg   %ax,%ax

0000000000401f20 <udp_connect>:
}

int udp_connect(const char *host, const char *port)
{
  401f20:	55                   	push   %rbp
  401f21:	48 89 e5             	mov    %rsp,%rbp
  401f24:	48 83 ec 30          	sub    $0x30,%rsp
  401f28:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  401f2c:	48 8d 4d dc          	lea    -0x24(%rbp),%rcx
  401f30:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  401f34:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
	int fd, n;
	socklen_t len;
	struct sockaddr *cli;

	fd = udp_client(host, port, &cli, &len);
  401f38:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  401f3c:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  401f40:	e8 1b fe ff ff       	callq  401d60 <udp_client>
  401f45:	89 45 e4             	mov    %eax,-0x1c(%rbp)
	n = connect(fd, cli, len);
  401f48:	8b 7d e4             	mov    -0x1c(%rbp),%edi
  401f4b:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  401f4f:	8b 55 dc             	mov    -0x24(%rbp),%edx
  401f52:	e8 e9 ee ff ff       	callq  400e40 <connect@plt>
  401f57:	89 45 e0             	mov    %eax,-0x20(%rbp)
	free(cli);
  401f5a:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  401f5e:	48 89 cf             	mov    %rcx,%rdi
  401f61:	e8 2a ed ff ff       	callq  400c90 <free@plt>
	if (n < 0)
  401f66:	83 7d e0 00          	cmpl   $0x0,-0x20(%rbp)
  401f6a:	0f 8d 0c 00 00 00    	jge    401f7c <udp_connect+0x5c>
		return -1;
  401f70:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
  401f77:	e9 06 00 00 00       	jmpq   401f82 <udp_connect+0x62>
	else
		return fd;
  401f7c:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  401f7f:	89 45 fc             	mov    %eax,-0x4(%rbp)
}
  401f82:	8b 45 fc             	mov    -0x4(%rbp),%eax
  401f85:	48 83 c4 30          	add    $0x30,%rsp
  401f89:	5d                   	pop    %rbp
  401f8a:	c3                   	retq   
  401f8b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000401f90 <udp_server>:

int udp_server(const char *host,
		const char *port, socklen_t *addrlenp)
{
  401f90:	55                   	push   %rbp
  401f91:	48 89 e5             	mov    %rsp,%rbp
  401f94:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
  401f9b:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  401f9f:	48 8d 4d a8          	lea    -0x58(%rbp),%rcx
  401fa3:	45 31 c0             	xor    %r8d,%r8d
  401fa6:	41 b9 30 00 00 00    	mov    $0x30,%r9d
  401fac:	45 89 ca             	mov    %r9d,%r10d
  401faf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401fb3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  401fb7:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	int fd, n;
	struct addrinfo hints, *res, *ressave;

	memset(&hints, 0, sizeof(struct addrinfo));
  401fbb:	48 89 c2             	mov    %rax,%rdx
  401fbe:	48 89 d7             	mov    %rdx,%rdi
  401fc1:	44 89 c6             	mov    %r8d,%esi
  401fc4:	4c 89 d2             	mov    %r10,%rdx
  401fc7:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  401fcb:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  401fcf:	e8 7c ed ff ff       	callq  400d50 <memset@plt>
	hints.ai_flags = AI_PASSIVE;
  401fd4:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%rbp)
	hints.ai_family = AF_UNSPEC;
  401fdb:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
	hints.ai_socktype = SOCK_DGRAM;
  401fe2:	c7 45 b8 02 00 00 00 	movl   $0x2,-0x48(%rbp)

	if ((n = getaddrinfo(host, port, &hints, &res)) != 0)
  401fe9:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  401fed:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  401ff1:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  401ff5:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
  401ff9:	e8 52 ee ff ff       	callq  400e50 <getaddrinfo@plt>
  401ffe:	89 45 e0             	mov    %eax,-0x20(%rbp)
  402001:	83 f8 00             	cmp    $0x0,%eax
  402004:	0f 84 3b 00 00 00    	je     402045 <udp_server+0xb5>
		error(EXIT_FAILURE, 0, "udp_server error for %s, %s: %s", host, port, gai_strerror(n));
  40200a:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  40200e:	4c 8b 45 f0          	mov    -0x10(%rbp),%r8
  402012:	8b 7d e0             	mov    -0x20(%rbp),%edi
  402015:	48 89 4d 88          	mov    %rcx,-0x78(%rbp)
  402019:	4c 89 45 80          	mov    %r8,-0x80(%rbp)
  40201d:	e8 fe ec ff ff       	callq  400d20 <gai_strerror@plt>
  402022:	bf 01 00 00 00       	mov    $0x1,%edi
  402027:	31 f6                	xor    %esi,%esi
  402029:	48 ba a0 28 40 00 00 	movabs $0x4028a0,%rdx
  402030:	00 00 00 
  402033:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
  402037:	4c 8b 45 80          	mov    -0x80(%rbp),%r8
  40203b:	49 89 c1             	mov    %rax,%r9
  40203e:	b0 00                	mov    $0x0,%al
  402040:	e8 ab ed ff ff       	callq  400df0 <error@plt>
	ressave = res;
  402045:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  402049:	48 89 45 a0          	mov    %rax,-0x60(%rbp)

	do {
		fd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);
  40204d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  402051:	8b 78 04             	mov    0x4(%rax),%edi
  402054:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  402058:	8b 70 08             	mov    0x8(%rax),%esi
  40205b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40205f:	8b 50 0c             	mov    0xc(%rax),%edx
  402062:	e8 29 ee ff ff       	callq  400e90 <socket@plt>
  402067:	89 45 e4             	mov    %eax,-0x1c(%rbp)
		if (fd < 0)
  40206a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  40206e:	0f 8d 05 00 00 00    	jge    402079 <udp_server+0xe9>
			continue;
  402074:	e9 4c 00 00 00       	jmpq   4020c5 <udp_server+0x135>
		/* do not need SO_REUSEADDR because UDP have not TIME_WAIT */
		if (bind(fd, res->ai_addr, res->ai_addrlen) == 0)
  402079:	8b 7d e4             	mov    -0x1c(%rbp),%edi
  40207c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  402080:	48 8b 70 18          	mov    0x18(%rax),%rsi
  402084:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  402088:	8b 50 10             	mov    0x10(%rax),%edx
  40208b:	e8 50 ed ff ff       	callq  400de0 <bind@plt>
  402090:	83 f8 00             	cmp    $0x0,%eax
  402093:	0f 85 05 00 00 00    	jne    40209e <udp_server+0x10e>
			break;
  402099:	e9 3d 00 00 00       	jmpq   4020db <udp_server+0x14b>
		if (close(fd) < 0)
  40209e:	8b 7d e4             	mov    -0x1c(%rbp),%edi
  4020a1:	e8 ba ec ff ff       	callq  400d60 <close@plt>
  4020a6:	83 f8 00             	cmp    $0x0,%eax
  4020a9:	0f 8d 11 00 00 00    	jge    4020c0 <udp_server+0x130>
  4020af:	48 bf e4 27 40 00 00 	movabs $0x4027e4,%rdi
  4020b6:	00 00 00 
			esys("close error");
  4020b9:	b0 00                	mov    $0x0,%al
  4020bb:	e8 50 f6 ff ff       	callq  401710 <esys>
	} while ((res = res->ai_next) != NULL);
  4020c0:	e9 00 00 00 00       	jmpq   4020c5 <udp_server+0x135>
  4020c5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4020c9:	48 8b 40 28          	mov    0x28(%rax),%rax
  4020cd:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  4020d1:	48 83 f8 00          	cmp    $0x0,%rax
  4020d5:	0f 85 72 ff ff ff    	jne    40204d <udp_server+0xbd>

	if (res == NULL)
  4020db:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  4020e0:	0f 85 25 00 00 00    	jne    40210b <udp_server+0x17b>
		error(EXIT_FAILURE, errno, "tcp_listen error for %s, %s", host, port);
  4020e6:	e8 b5 eb ff ff       	callq  400ca0 <__errno_location@plt>
  4020eb:	bf 01 00 00 00       	mov    $0x1,%edi
  4020f0:	48 ba f0 27 40 00 00 	movabs $0x4027f0,%rdx
  4020f7:	00 00 00 
  4020fa:	8b 30                	mov    (%rax),%esi
  4020fc:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  402100:	4c 8b 45 f0          	mov    -0x10(%rbp),%r8
  402104:	b0 00                	mov    $0x0,%al
  402106:	e8 e5 ec ff ff       	callq  400df0 <error@plt>
	if (addrlenp)  /* addrlen is not necessary for UDP server. */
  40210b:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  402110:	0f 84 0d 00 00 00    	je     402123 <udp_server+0x193>
		*addrlenp = res->ai_addrlen;
  402116:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40211a:	8b 48 10             	mov    0x10(%rax),%ecx
  40211d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402121:	89 08                	mov    %ecx,(%rax)

	freeaddrinfo(ressave);
  402123:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  402127:	e8 54 ed ff ff       	callq  400e80 <freeaddrinfo@plt>

	return fd;
  40212c:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  40212f:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
  402136:	5d                   	pop    %rbp
  402137:	c3                   	retq   
  402138:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40213f:	00 

0000000000402140 <equit>:
    fputs(buf, stderr);
    fflush(stderr);
}

void equit(const char *fmt, ...)
{
  402140:	55                   	push   %rbp
  402141:	48 89 e5             	mov    %rsp,%rbp
  402144:	48 81 ec 90 01 00 00 	sub    $0x190,%rsp
  40214b:	84 c0                	test   %al,%al
  40214d:	0f 29 bd 20 ff ff ff 	movaps %xmm7,-0xe0(%rbp)
  402154:	0f 29 b5 10 ff ff ff 	movaps %xmm6,-0xf0(%rbp)
  40215b:	0f 29 ad 00 ff ff ff 	movaps %xmm5,-0x100(%rbp)
  402162:	0f 29 a5 f0 fe ff ff 	movaps %xmm4,-0x110(%rbp)
  402169:	0f 29 9d e0 fe ff ff 	movaps %xmm3,-0x120(%rbp)
  402170:	0f 29 95 d0 fe ff ff 	movaps %xmm2,-0x130(%rbp)
  402177:	0f 29 8d c0 fe ff ff 	movaps %xmm1,-0x140(%rbp)
  40217e:	0f 29 85 b0 fe ff ff 	movaps %xmm0,-0x150(%rbp)
  402185:	48 89 bd a8 fe ff ff 	mov    %rdi,-0x158(%rbp)
  40218c:	4c 89 8d a0 fe ff ff 	mov    %r9,-0x160(%rbp)
  402193:	4c 89 85 98 fe ff ff 	mov    %r8,-0x168(%rbp)
  40219a:	48 89 8d 90 fe ff ff 	mov    %rcx,-0x170(%rbp)
  4021a1:	48 89 95 88 fe ff ff 	mov    %rdx,-0x178(%rbp)
  4021a8:	48 89 b5 80 fe ff ff 	mov    %rsi,-0x180(%rbp)
  4021af:	0f 84 5e 00 00 00    	je     402213 <equit+0xd3>
  4021b5:	0f 28 85 b0 fe ff ff 	movaps -0x150(%rbp),%xmm0
  4021bc:	0f 29 85 60 ff ff ff 	movaps %xmm0,-0xa0(%rbp)
  4021c3:	0f 28 8d c0 fe ff ff 	movaps -0x140(%rbp),%xmm1
  4021ca:	0f 29 8d 70 ff ff ff 	movaps %xmm1,-0x90(%rbp)
  4021d1:	0f 28 95 d0 fe ff ff 	movaps -0x130(%rbp),%xmm2
  4021d8:	0f 29 55 80          	movaps %xmm2,-0x80(%rbp)
  4021dc:	0f 28 9d e0 fe ff ff 	movaps -0x120(%rbp),%xmm3
  4021e3:	0f 29 5d 90          	movaps %xmm3,-0x70(%rbp)
  4021e7:	0f 28 a5 f0 fe ff ff 	movaps -0x110(%rbp),%xmm4
  4021ee:	0f 29 65 a0          	movaps %xmm4,-0x60(%rbp)
  4021f2:	0f 28 ad 00 ff ff ff 	movaps -0x100(%rbp),%xmm5
  4021f9:	0f 29 6d b0          	movaps %xmm5,-0x50(%rbp)
  4021fd:	0f 28 b5 10 ff ff ff 	movaps -0xf0(%rbp),%xmm6
  402204:	0f 29 75 c0          	movaps %xmm6,-0x40(%rbp)
  402208:	0f 28 bd 20 ff ff ff 	movaps -0xe0(%rbp),%xmm7
  40220f:	0f 29 7d d0          	movaps %xmm7,-0x30(%rbp)
  402213:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
  40221a:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  402221:	48 8b 8d 98 fe ff ff 	mov    -0x168(%rbp),%rcx
  402228:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
  40222f:	48 8b 95 90 fe ff ff 	mov    -0x170(%rbp),%rdx
  402236:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  40223d:	48 8b b5 88 fe ff ff 	mov    -0x178(%rbp),%rsi
  402244:	48 89 b5 40 ff ff ff 	mov    %rsi,-0xc0(%rbp)
  40224b:	48 8b bd 80 fe ff ff 	mov    -0x180(%rbp),%rdi
  402252:	48 89 bd 38 ff ff ff 	mov    %rdi,-0xc8(%rbp)
  402259:	4c 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%r8
  402260:	31 ff                	xor    %edi,%edi
  402262:	4c 8d 4d e0          	lea    -0x20(%rbp),%r9
  402266:	4c 89 45 f8          	mov    %r8,-0x8(%rbp)
    va_list ap;

    va_start(ap, fmt);
  40226a:	4d 89 c8             	mov    %r9,%r8
  40226d:	4c 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%r10
  402274:	4d 89 50 10          	mov    %r10,0x10(%r8)
  402278:	4c 8d 55 10          	lea    0x10(%rbp),%r10
  40227c:	4d 89 50 08          	mov    %r10,0x8(%r8)
  402280:	41 c7 40 04 30 00 00 	movl   $0x30,0x4(%r8)
  402287:	00 
  402288:	41 c7 00 08 00 00 00 	movl   $0x8,(%r8)
    edoit(0, fmt, ap);
  40228f:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  402293:	4c 89 ca             	mov    %r9,%rdx
  402296:	e8 15 00 00 00       	callq  4022b0 <edoit>
  40229b:	31 ff                	xor    %edi,%edi
  40229d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    va_end(ap);
    exit(EXIT_SUCCESS);
  4022a1:	48 89 85 78 fe ff ff 	mov    %rax,-0x188(%rbp)
  4022a8:	e8 83 eb ff ff       	callq  400e30 <exit@plt>
  4022ad:	0f 1f 00             	nopl   (%rax)

00000000004022b0 <edoit>:
	return fd;
}

/* error handler functions */
static void edoit(int status, const char *fmt, va_list ap)
{
  4022b0:	55                   	push   %rbp
  4022b1:	48 89 e5             	mov    %rsp,%rbp
  4022b4:	48 81 ec 60 04 00 00 	sub    $0x460,%rsp
  4022bb:	89 7d fc             	mov    %edi,-0x4(%rbp)
  4022be:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4022c2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    int errno_save, n;
    char buf[MAXLINE + 1];

    errno_save = errno;
  4022c6:	e8 d5 e9 ff ff       	callq  400ca0 <__errno_location@plt>
  4022cb:	bf 00 04 00 00       	mov    $0x400,%edi
  4022d0:	89 fe                	mov    %edi,%esi
  4022d2:	48 8d bd d0 fb ff ff 	lea    -0x430(%rbp),%rdi
  4022d9:	8b 08                	mov    (%rax),%ecx
  4022db:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
    vsnprintf(buf, MAXLINE, fmt, ap);
  4022de:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4022e2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  4022e6:	e8 c5 e9 ff ff       	callq  400cb0 <vsnprintf@plt>
  4022eb:	48 8d bd d0 fb ff ff 	lea    -0x430(%rbp),%rdi
    n = strlen(buf);
  4022f2:	89 85 cc fb ff ff    	mov    %eax,-0x434(%rbp)
  4022f8:	e8 f3 e9 ff ff       	callq  400cf0 <strlen@plt>
  4022fd:	41 89 c0             	mov    %eax,%r8d
  402300:	44 89 45 e0          	mov    %r8d,-0x20(%rbp)
    if (status)
  402304:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  402308:	0f 84 57 00 00 00    	je     402365 <edoit+0xb5>
  40230e:	b8 00 04 00 00       	mov    $0x400,%eax
  402313:	48 8d 8d d0 fb ff ff 	lea    -0x430(%rbp),%rcx
        snprintf(buf + n, MAXLINE - n, ": %s", strerror(errno_save));
  40231a:	48 63 55 e0          	movslq -0x20(%rbp),%rdx
  40231e:	48 01 d1             	add    %rdx,%rcx
  402321:	2b 45 e0             	sub    -0x20(%rbp),%eax
  402324:	48 63 f0             	movslq %eax,%rsi
  402327:	8b 7d e4             	mov    -0x1c(%rbp),%edi
  40232a:	48 89 8d c0 fb ff ff 	mov    %rcx,-0x440(%rbp)
  402331:	48 89 b5 b8 fb ff ff 	mov    %rsi,-0x448(%rbp)
  402338:	e8 23 eb ff ff       	callq  400e60 <strerror@plt>
  40233d:	48 ba ce 27 40 00 00 	movabs $0x4027ce,%rdx
  402344:	00 00 00 
  402347:	48 8b bd c0 fb ff ff 	mov    -0x440(%rbp),%rdi
  40234e:	48 8b b5 b8 fb ff ff 	mov    -0x448(%rbp),%rsi
  402355:	48 89 c1             	mov    %rax,%rcx
  402358:	b0 00                	mov    $0x0,%al
  40235a:	e8 b1 e9 ff ff       	callq  400d10 <snprintf@plt>
  40235f:	89 85 b4 fb ff ff    	mov    %eax,-0x44c(%rbp)
  402365:	48 be 06 27 40 00 00 	movabs $0x402706,%rsi
  40236c:	00 00 00 
  40236f:	48 8d bd d0 fb ff ff 	lea    -0x430(%rbp),%rdi
    strcat(buf, "\n");
  402376:	e8 a5 ea ff ff       	callq  400e20 <strcat@plt>
  40237b:	48 8d bd d0 fb ff ff 	lea    -0x430(%rbp),%rdi
    fputs(buf, stderr);
  402382:	48 8b 34 25 40 31 60 	mov    0x603140,%rsi
  402389:	00 
  40238a:	48 89 85 a8 fb ff ff 	mov    %rax,-0x458(%rbp)
  402391:	e8 aa e9 ff ff       	callq  400d40 <fputs@plt>
    fflush(stderr);
  402396:	48 8b 3c 25 40 31 60 	mov    0x603140,%rdi
  40239d:	00 
  40239e:	89 85 a4 fb ff ff    	mov    %eax,-0x45c(%rbp)
  4023a4:	e8 07 ea ff ff       	callq  400db0 <fflush@plt>
}
  4023a9:	89 85 a0 fb ff ff    	mov    %eax,-0x460(%rbp)
  4023af:	48 81 c4 60 04 00 00 	add    $0x460,%rsp
  4023b6:	5d                   	pop    %rbp
  4023b7:	c3                   	retq   
  4023b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4023bf:	00 

00000000004023c0 <eret>:
    va_end(ap);
    exit(EXIT_FAILURE);
}

void eret(const char *fmt, ...)
{
  4023c0:	55                   	push   %rbp
  4023c1:	48 89 e5             	mov    %rsp,%rbp
  4023c4:	48 81 ec 80 01 00 00 	sub    $0x180,%rsp
  4023cb:	84 c0                	test   %al,%al
  4023cd:	0f 29 bd 20 ff ff ff 	movaps %xmm7,-0xe0(%rbp)
  4023d4:	0f 29 b5 10 ff ff ff 	movaps %xmm6,-0xf0(%rbp)
  4023db:	0f 29 ad 00 ff ff ff 	movaps %xmm5,-0x100(%rbp)
  4023e2:	0f 29 a5 f0 fe ff ff 	movaps %xmm4,-0x110(%rbp)
  4023e9:	0f 29 9d e0 fe ff ff 	movaps %xmm3,-0x120(%rbp)
  4023f0:	0f 29 95 d0 fe ff ff 	movaps %xmm2,-0x130(%rbp)
  4023f7:	0f 29 8d c0 fe ff ff 	movaps %xmm1,-0x140(%rbp)
  4023fe:	0f 29 85 b0 fe ff ff 	movaps %xmm0,-0x150(%rbp)
  402405:	48 89 bd a8 fe ff ff 	mov    %rdi,-0x158(%rbp)
  40240c:	4c 89 8d a0 fe ff ff 	mov    %r9,-0x160(%rbp)
  402413:	4c 89 85 98 fe ff ff 	mov    %r8,-0x168(%rbp)
  40241a:	48 89 8d 90 fe ff ff 	mov    %rcx,-0x170(%rbp)
  402421:	48 89 95 88 fe ff ff 	mov    %rdx,-0x178(%rbp)
  402428:	48 89 b5 80 fe ff ff 	mov    %rsi,-0x180(%rbp)
  40242f:	0f 84 5e 00 00 00    	je     402493 <eret+0xd3>
  402435:	0f 28 85 b0 fe ff ff 	movaps -0x150(%rbp),%xmm0
  40243c:	0f 29 85 60 ff ff ff 	movaps %xmm0,-0xa0(%rbp)
  402443:	0f 28 8d c0 fe ff ff 	movaps -0x140(%rbp),%xmm1
  40244a:	0f 29 8d 70 ff ff ff 	movaps %xmm1,-0x90(%rbp)
  402451:	0f 28 95 d0 fe ff ff 	movaps -0x130(%rbp),%xmm2
  402458:	0f 29 55 80          	movaps %xmm2,-0x80(%rbp)
  40245c:	0f 28 9d e0 fe ff ff 	movaps -0x120(%rbp),%xmm3
  402463:	0f 29 5d 90          	movaps %xmm3,-0x70(%rbp)
  402467:	0f 28 a5 f0 fe ff ff 	movaps -0x110(%rbp),%xmm4
  40246e:	0f 29 65 a0          	movaps %xmm4,-0x60(%rbp)
  402472:	0f 28 ad 00 ff ff ff 	movaps -0x100(%rbp),%xmm5
  402479:	0f 29 6d b0          	movaps %xmm5,-0x50(%rbp)
  40247d:	0f 28 b5 10 ff ff ff 	movaps -0xf0(%rbp),%xmm6
  402484:	0f 29 75 c0          	movaps %xmm6,-0x40(%rbp)
  402488:	0f 28 bd 20 ff ff ff 	movaps -0xe0(%rbp),%xmm7
  40248f:	0f 29 7d d0          	movaps %xmm7,-0x30(%rbp)
  402493:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
  40249a:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  4024a1:	48 8b 8d 98 fe ff ff 	mov    -0x168(%rbp),%rcx
  4024a8:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
  4024af:	48 8b 95 90 fe ff ff 	mov    -0x170(%rbp),%rdx
  4024b6:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  4024bd:	48 8b b5 88 fe ff ff 	mov    -0x178(%rbp),%rsi
  4024c4:	48 89 b5 40 ff ff ff 	mov    %rsi,-0xc0(%rbp)
  4024cb:	48 8b bd 80 fe ff ff 	mov    -0x180(%rbp),%rdi
  4024d2:	48 89 bd 38 ff ff ff 	mov    %rdi,-0xc8(%rbp)
  4024d9:	4c 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%r8
  4024e0:	4c 89 45 f8          	mov    %r8,-0x8(%rbp)
  4024e4:	4c 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%r8
    va_list ap;

    va_start(ap, fmt);
  4024eb:	4c 89 45 f0          	mov    %r8,-0x10(%rbp)
  4024ef:	4c 8d 45 10          	lea    0x10(%rbp),%r8
  4024f3:	4c 89 45 e8          	mov    %r8,-0x18(%rbp)
  4024f7:	c7 45 e4 30 00 00 00 	movl   $0x30,-0x1c(%rbp)
  4024fe:	c7 45 e0 08 00 00 00 	movl   $0x8,-0x20(%rbp)
    edoit(1, fmt, ap);
  402505:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  402509:	bf 01 00 00 00       	mov    $0x1,%edi
  40250e:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  402512:	e8 99 fd ff ff       	callq  4022b0 <edoit>
    va_end(ap);
}
  402517:	48 81 c4 80 01 00 00 	add    $0x180,%rsp
  40251e:	5d                   	pop    %rbp
  40251f:	c3                   	retq   

0000000000402520 <emsg>:

void emsg(const char *fmt, ...)
{
  402520:	55                   	push   %rbp
  402521:	48 89 e5             	mov    %rsp,%rbp
  402524:	48 81 ec 80 01 00 00 	sub    $0x180,%rsp
  40252b:	84 c0                	test   %al,%al
  40252d:	0f 29 bd 20 ff ff ff 	movaps %xmm7,-0xe0(%rbp)
  402534:	0f 29 b5 10 ff ff ff 	movaps %xmm6,-0xf0(%rbp)
  40253b:	0f 29 ad 00 ff ff ff 	movaps %xmm5,-0x100(%rbp)
  402542:	0f 29 a5 f0 fe ff ff 	movaps %xmm4,-0x110(%rbp)
  402549:	0f 29 9d e0 fe ff ff 	movaps %xmm3,-0x120(%rbp)
  402550:	0f 29 95 d0 fe ff ff 	movaps %xmm2,-0x130(%rbp)
  402557:	0f 29 8d c0 fe ff ff 	movaps %xmm1,-0x140(%rbp)
  40255e:	0f 29 85 b0 fe ff ff 	movaps %xmm0,-0x150(%rbp)
  402565:	48 89 bd a8 fe ff ff 	mov    %rdi,-0x158(%rbp)
  40256c:	4c 89 8d a0 fe ff ff 	mov    %r9,-0x160(%rbp)
  402573:	4c 89 85 98 fe ff ff 	mov    %r8,-0x168(%rbp)
  40257a:	48 89 8d 90 fe ff ff 	mov    %rcx,-0x170(%rbp)
  402581:	48 89 95 88 fe ff ff 	mov    %rdx,-0x178(%rbp)
  402588:	48 89 b5 80 fe ff ff 	mov    %rsi,-0x180(%rbp)
  40258f:	0f 84 5e 00 00 00    	je     4025f3 <emsg+0xd3>
  402595:	0f 28 85 b0 fe ff ff 	movaps -0x150(%rbp),%xmm0
  40259c:	0f 29 85 60 ff ff ff 	movaps %xmm0,-0xa0(%rbp)
  4025a3:	0f 28 8d c0 fe ff ff 	movaps -0x140(%rbp),%xmm1
  4025aa:	0f 29 8d 70 ff ff ff 	movaps %xmm1,-0x90(%rbp)
  4025b1:	0f 28 95 d0 fe ff ff 	movaps -0x130(%rbp),%xmm2
  4025b8:	0f 29 55 80          	movaps %xmm2,-0x80(%rbp)
  4025bc:	0f 28 9d e0 fe ff ff 	movaps -0x120(%rbp),%xmm3
  4025c3:	0f 29 5d 90          	movaps %xmm3,-0x70(%rbp)
  4025c7:	0f 28 a5 f0 fe ff ff 	movaps -0x110(%rbp),%xmm4
  4025ce:	0f 29 65 a0          	movaps %xmm4,-0x60(%rbp)
  4025d2:	0f 28 ad 00 ff ff ff 	movaps -0x100(%rbp),%xmm5
  4025d9:	0f 29 6d b0          	movaps %xmm5,-0x50(%rbp)
  4025dd:	0f 28 b5 10 ff ff ff 	movaps -0xf0(%rbp),%xmm6
  4025e4:	0f 29 75 c0          	movaps %xmm6,-0x40(%rbp)
  4025e8:	0f 28 bd 20 ff ff ff 	movaps -0xe0(%rbp),%xmm7
  4025ef:	0f 29 7d d0          	movaps %xmm7,-0x30(%rbp)
  4025f3:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
  4025fa:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  402601:	48 8b 8d 98 fe ff ff 	mov    -0x168(%rbp),%rcx
  402608:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
  40260f:	48 8b 95 90 fe ff ff 	mov    -0x170(%rbp),%rdx
  402616:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  40261d:	48 8b b5 88 fe ff ff 	mov    -0x178(%rbp),%rsi
  402624:	48 89 b5 40 ff ff ff 	mov    %rsi,-0xc0(%rbp)
  40262b:	48 8b bd 80 fe ff ff 	mov    -0x180(%rbp),%rdi
  402632:	48 89 bd 38 ff ff ff 	mov    %rdi,-0xc8(%rbp)
  402639:	4c 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%r8
  402640:	4c 89 45 f8          	mov    %r8,-0x8(%rbp)
  402644:	4c 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%r8
    va_list ap;

    va_start(ap, fmt);
  40264b:	4c 89 45 f0          	mov    %r8,-0x10(%rbp)
  40264f:	4c 8d 45 10          	lea    0x10(%rbp),%r8
  402653:	4c 89 45 e8          	mov    %r8,-0x18(%rbp)
  402657:	c7 45 e4 30 00 00 00 	movl   $0x30,-0x1c(%rbp)
  40265e:	c7 45 e0 08 00 00 00 	movl   $0x8,-0x20(%rbp)
    edoit(0, fmt, ap);
  402665:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  402669:	31 ff                	xor    %edi,%edi
  40266b:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  40266f:	e8 3c fc ff ff       	callq  4022b0 <edoit>
    va_end(ap);
}
  402674:	48 81 c4 80 01 00 00 	add    $0x180,%rsp
  40267b:	5d                   	pop    %rbp
  40267c:	c3                   	retq   
  40267d:	0f 1f 00             	nopl   (%rax)

0000000000402680 <__libc_csu_init>:
  402680:	41 57                	push   %r15
  402682:	41 56                	push   %r14
  402684:	41 89 ff             	mov    %edi,%r15d
  402687:	41 55                	push   %r13
  402689:	41 54                	push   %r12
  40268b:	4c 8d 25 5e 07 20 00 	lea    0x20075e(%rip),%r12        # 602df0 <__frame_dummy_init_array_entry>
  402692:	55                   	push   %rbp
  402693:	48 8d 2d 5e 07 20 00 	lea    0x20075e(%rip),%rbp        # 602df8 <__init_array_end>
  40269a:	53                   	push   %rbx
  40269b:	49 89 f6             	mov    %rsi,%r14
  40269e:	49 89 d5             	mov    %rdx,%r13
  4026a1:	4c 29 e5             	sub    %r12,%rbp
  4026a4:	48 83 ec 08          	sub    $0x8,%rsp
  4026a8:	48 c1 fd 03          	sar    $0x3,%rbp
  4026ac:	e8 97 e5 ff ff       	callq  400c48 <_init>
  4026b1:	48 85 ed             	test   %rbp,%rbp
  4026b4:	74 20                	je     4026d6 <__libc_csu_init+0x56>
  4026b6:	31 db                	xor    %ebx,%ebx
  4026b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4026bf:	00 
  4026c0:	4c 89 ea             	mov    %r13,%rdx
  4026c3:	4c 89 f6             	mov    %r14,%rsi
  4026c6:	44 89 ff             	mov    %r15d,%edi
  4026c9:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
  4026cd:	48 83 c3 01          	add    $0x1,%rbx
  4026d1:	48 39 eb             	cmp    %rbp,%rbx
  4026d4:	75 ea                	jne    4026c0 <__libc_csu_init+0x40>
  4026d6:	48 83 c4 08          	add    $0x8,%rsp
  4026da:	5b                   	pop    %rbx
  4026db:	5d                   	pop    %rbp
  4026dc:	41 5c                	pop    %r12
  4026de:	41 5d                	pop    %r13
  4026e0:	41 5e                	pop    %r14
  4026e2:	41 5f                	pop    %r15
  4026e4:	c3                   	retq   
  4026e5:	90                   	nop
  4026e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4026ed:	00 00 00 

00000000004026f0 <__libc_csu_fini>:
  4026f0:	f3 c3                	repz retq 

Disassembly of section .fini:

00000000004026f4 <_fini>:
  4026f4:	48 83 ec 08          	sub    $0x8,%rsp
  4026f8:	48 83 c4 08          	add    $0x8,%rsp
  4026fc:	c3                   	retq   
